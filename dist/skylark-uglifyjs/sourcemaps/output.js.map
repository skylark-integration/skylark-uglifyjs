{"version":3,"sources":["output.js"],"names":["define","m_utils","m_ast","m_parse","defaults","makePredicate","noop","return_false","return_true","AST_Array","AST_Arrow","AST_AsyncArrow","AST_AsyncDefun","AST_AsyncFunction","AST_AsyncGeneratorDefun","AST_AsyncGeneratorFunction","AST_Assign","AST_Await","AST_Binary","AST_BlockStatement","AST_Break","AST_Call","AST_Case","AST_Catch","AST_Class","AST_ClassExpression","AST_ClassField","AST_ClassGetter","AST_ClassInit","AST_ClassMethod","AST_ClassProperty","AST_ClassSetter","AST_Conditional","AST_Const","AST_Constant","AST_Continue","AST_Debugger","AST_Default","AST_DefaultValue","AST_Definitions","AST_DestructuredArray","AST_DestructuredKeyVal","AST_DestructuredObject","AST_Destructured","AST_Directive","AST_Do","AST_Dot","AST_EmptyStatement","AST_Exit","AST_ExportDeclaration","AST_ExportDefault","AST_ExportForeign","AST_ExportReferences","AST_Finally","AST_For","AST_ForAwaitOf","AST_ForEnumeration","AST_ForIn","AST_ForOf","AST_Function","AST_GeneratorDefun","AST_GeneratorFunction","AST_Hole","AST_If","AST_Import","AST_IterationStatement","AST_Jump","AST_LabeledStatement","AST_Lambda","AST_Let","AST_New","AST_Node","AST_Number","AST_Object","AST_ObjectGetter","AST_ObjectKeyVal","AST_ObjectMethod","AST_ObjectProperty","AST_ObjectSetter","AST_PropAccess","AST_RegExp","AST_Return","AST_Scope","AST_Sequence","AST_SimpleStatement","AST_Spread","AST_Statement","AST_StatementWithBody","AST_String","AST_Sub","AST_Switch","AST_SwitchBranch","AST_Symbol","AST_SymbolExport","AST_SymbolFunarg","AST_SymbolImport","AST_Template","AST_Throw","AST_Toplevel","AST_Try","AST_Unary","AST_UnaryPostfix","AST_UnaryPrefix","AST_Var","AST_VarDef","AST_While","AST_With","AST_Yield","TreeWalker","is_arrow","is_generator","is_async","first_in_statement","root_expr","is_identifier_char","is_identifier_string","is_surrogate_pair_head","is_surrogate_pair_tail","PRECEDENCE","RESERVED_WORDS","is_some_comments","comment","type","test","value","OutputStream","options","annotations","ascii_only","beautify","braces","comments","extendscript","galio","ie","indent_level","indent_start","inline_script","keep_quoted_props","max_line_len","preamble","preserve_line","quote_keys","quote_style","semicolons","shebang","source_map","v8","webkit","width","wrap_iife","comment_filter","make_indent","Array","join","Error","JSON","stringify","regex_pos","lastIndexOf","RegExp","substr","this","last","mapping_name","mapping_token","might_need_space","might_need_semicolon","output","stack","current_col","current_line","current_indent","full_indent","half_indent","length","line_end","line_fixed","mappings","need_newline_indented","need_space","stored","reset","str","to_utf8","identifier","replace","ch","charCodeAt","toString","code","s","i","j","slice","quote_single","quote_double","quote_string","quote","dq","sq","make_string","charAt","adjust_mappings","line","col","forEach","mapping","flush_mappings","add","token","file","name","insert_newlines","count","new_col","fix_line","flush","warn","require_semicolon","require_space","prev","print","indent","space","a","indexOf","need_semicolon","push","split","n","half","with_indent","cont","save_indentation","may_add_newline","newline","semicolon","add_mapping","pad_comment","force","nlb","print_comment","get","should_break","has_parens","comma","colon","force_semicolon","print_name","print_string","with_block","end","with_parens","with_square","option","opt","prepend_comments","node","scan","self","expression","tw","dump","printed","parent","left","TYPE","condition","expressions","before","concat","walk","shift","filter","start","AST_Token","comments_before","_dumped","index","append_comments","tail","all","c","push_node","pop_node","pop","DEFPRINT","nodetype","generator","DEFMETHOD","PARENS","func","needs_parens_function","p","needs_parens_obj","needs_parens_unary","operator","tag","need_chain_parens","terminal","needs_parens_assign_cond","display_body","body","is_toplevel","allow_directives","in_directive","was_asm","use_asm","stmt","print_braced_empty","print_braced","print_for_enum","prefix","infix","init","object","force_statement","print_alias","alias","print_funargs","argnames","arg","rest","print_arrow","argname","print_lambda","print_async","print_async_generator","print_generator","print_method","fn","print_property_key","print_jump","kind","prop","target","print_branch_body","print_definitions","definitions","def","parenthesize_for_no_in","no_in","parens","print_annotation","pure","level","print_call_args","args","expr","print_properties","no_comma","props","properties","key","make_num","private","print_accessor","static","get_symbol_name","sym","definition","mangled_name","stat","make_block","need_constructor_parens","num","len","digits","candidates","Math","floor","toLowerCase","match","exec","best","DEFMAP","readonly","stream","force_parens","doit","add_source_map","_codegen","needs_parens","po","pp","so","sp","g","label","step","AST_DefClass","AST_LambdaDefinition","AST_LambdaExpression","keys","print_entry","aliases","path","default","extends","alternative","b","branch","bcatch","bfinally","optional","property","quoted","op","exp","right","consequent","nested","elements","strings","raw","regexp","raw_source"],"mappings":"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","file":"../output.js","sourcesContent":["define([\n    \"./utils\",\n    \"./ast\",\n    \"./parse\"\n],function(m_utils,m_ast,m_parse){\n    /***********************************************************************\n\n      A JavaScript tokenizer / parser / beautifier / compressor.\n      https://github.com/mishoo/UglifyJS\n\n      -------------------------------- (C) ---------------------------------\n\n                               Author: Mihai Bazon\n                             <mihai.bazon@gmail.com>\n                           http://mihai.bazon.net/blog\n\n      Distributed under the BSD license:\n\n        Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n        Redistribution and use in source and binary forms, with or without\n        modification, are permitted provided that the following conditions\n        are met:\n\n            * Redistributions of source code must retain the above\n              copyright notice, this list of conditions and the following\n              disclaimer.\n\n            * Redistributions in binary form must reproduce the above\n              copyright notice, this list of conditions and the following\n              disclaimer in the documentation and/or other materials\n              provided with the distribution.\n\n        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n        EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n        IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n        PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n        LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n        OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n        PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n        PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n        THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n        TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n        THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n        SUCH DAMAGE.\n\n     ***********************************************************************/\n\n    \"use strict\";\n\n     const {\n        defaults,\n        makePredicate,\n        noop,\n        return_false,\n        return_true\n    } = m_utils;\n\n    const {\n        AST_Array,\n        AST_Arrow,\n        AST_AsyncArrow,\n        AST_AsyncDefun,\n        AST_AsyncFunction,   \n        AST_AsyncGeneratorDefun,\n        AST_AsyncGeneratorFunction,     \n        AST_Assign,\n        AST_Await,\n        AST_BigInt,\n        AST_Binary,\n        AST_BlockStatement,\n        AST_Break,\n        AST_Call,\n        AST_Case,\n        AST_Catch,\n        AST_Chain,\n        AST_Class,\n        AST_ClassExpression,\n        AST_ClassField,\n        AST_ClassGetter,\n        AST_ClassInit,\n        AST_ClassMethod,\n        AST_ClassPrivateProperty,\n        AST_ClassProperty,\n        AST_ClassSetter,\n        AST_ClassStaticBlock,\n        AST_ConciseMethod,\n        AST_Conditional,\n        AST_Const,\n        AST_Constant,\n        AST_Continue,\n        AST_Debugger,\n        AST_Default,\n        AST_DefaultAssign,\n        AST_DefaultValue,\n        AST_Definitions,\n        AST_Defun,\n        AST_Destructuring,\n        AST_DestructuredArray,\n        AST_DestructuredKeyVal,\n        AST_DestructuredObject,\n        AST_Destructured,\n        AST_Directive,\n        AST_Do,\n        AST_Dot,\n        AST_DotHash,\n        AST_EmptyStatement,\n        AST_Exit,\n        AST_Expansion,\n        AST_Export,\n        AST_ExportDeclaration,\n        AST_ExportDefault,\n        AST_ExportForeign,\n        AST_ExportReferences,\n        AST_Finally,\n        AST_For,\n        AST_ForAwaitOf,\n        AST_ForEnumeration,\n        AST_ForIn,\n        AST_ForOf,\n        AST_Function,\n        AST_GeneratorDefun,\n        AST_GeneratorFunction,\n        AST_Hole,\n        AST_If,\n        AST_Import,\n        AST_ImportMeta,\n        AST_IterationStatement,\n        AST_Jump,\n        AST_LabeledStatement,\n        AST_Lambda,\n        AST_Let,\n        AST_LoopControl,\n        AST_NameMapping,\n        AST_New,\n        AST_NewTarget,\n        AST_Node,\n        AST_Number,\n        AST_Object,\n        AST_ObjectGetter,\n        AST_ObjectKeyVal,\n        AST_ObjectMethod,\n        AST_ObjectProperty,\n        AST_ObjectSetter,\n        AST_PrefixedTemplateString,\n        AST_PropAccess,\n        AST_PrivateGetter,\n        AST_PrivateMethod,\n        AST_PrivateSetter,\n        AST_PrivateIn,\n        AST_RegExp,\n        AST_Return,\n        AST_Scope,\n        AST_Sequence,\n        AST_SimpleStatement,\n        AST_Spread,\n        AST_Statement,\n        AST_StatementWithBody,\n        AST_String,\n        AST_Sub,\n        AST_Super,\n        AST_Switch,\n        AST_SwitchBranch,\n        AST_Symbol,\n        AST_SymbolClassProperty,\n        AST_SymbolExport,\n        AST_SymbolFunarg,\n        AST_SymbolImport,\n        AST_SymbolMethod,\n        AST_SymbolPrivateProperty,\n        AST_SymbolRef,\n        AST_Template,\n        AST_TemplateSegment,\n        AST_TemplateString,\n        AST_This,\n        AST_Throw,\n        AST_Toplevel,\n        AST_Try,\n        AST_TryBlock,\n        AST_Unary,\n        AST_UnaryPostfix,\n        AST_UnaryPrefix,\n        AST_Var,\n        AST_VarDef,\n        AST_While,\n        AST_With,\n        AST_Yield,\n        TreeWalker,\n\n        is_arrow,\n        is_generator,\n        is_async,\n        walk,\n        walk_abort,\n        first_in_statement,\n        root_expr\n\n    } = m_ast;\n\n    const {\n        is_identifier_char,\n        is_identifier_string,\n        is_surrogate_pair_head,\n        is_surrogate_pair_tail,\n        PRECEDENCE,\n        RESERVED_WORDS\n    } = m_parse;\n   \n\n    function is_some_comments(comment) {\n        // multiline comment\n        return comment.type == \"comment2\" && /@preserve|@license|@cc_on/i.test(comment.value);\n    }\n\n    function OutputStream(options) {\n        options = defaults(options, {\n            annotations      : false,\n            ascii_only       : false,\n            beautify         : false,\n            braces           : false,\n            comments         : false,\n            extendscript     : false,\n            galio            : false,\n            ie               : false,\n            indent_level     : 4,\n            indent_start     : 0,\n            inline_script    : true,\n            keep_quoted_props: false,\n            max_line_len     : false,\n            preamble         : null,\n            preserve_line    : false,\n            quote_keys       : false,\n            quote_style      : 0,\n            semicolons       : true,\n            shebang          : true,\n            source_map       : null,\n            v8               : false,\n            webkit           : false,\n            width            : 80,\n            wrap_iife        : false,\n        }, true);\n\n        // Convert comment option to RegExp if necessary and set up comments filter\n        var comment_filter = return_false; // Default case, throw all comments away\n        if (options.comments) {\n            var comments = options.comments;\n            if (typeof options.comments === \"string\" && /^\\/.*\\/[a-zA-Z]*$/.test(options.comments)) {\n                var regex_pos = options.comments.lastIndexOf(\"/\");\n                comments = new RegExp(\n                    options.comments.substr(1, regex_pos - 1),\n                    options.comments.substr(regex_pos + 1)\n                );\n            }\n            if (comments instanceof RegExp) {\n                comment_filter = function(comment) {\n                    return comment.type != \"comment5\" && comments.test(comment.value);\n                };\n            } else if (typeof comments === \"function\") {\n                comment_filter = function(comment) {\n                    return comment.type != \"comment5\" && comments(this, comment);\n                };\n            } else if (comments === \"some\") {\n                comment_filter = is_some_comments;\n            } else { // NOTE includes \"all\" option\n                comment_filter = return_true;\n            }\n        }\n\n        function make_indent(value) {\n            if (typeof value == \"number\") return new Array(value + 1).join(\" \");\n            if (!value) return \"\";\n            if (!/^\\s*$/.test(value)) throw new Error(\"unsupported indentation: \" + JSON.stringify(\"\" + value));\n            return value;\n        }\n\n        var current_col = 0;\n        var current_line = 1;\n        var current_indent = make_indent(options.indent_start);\n        var full_indent = make_indent(options.indent_level);\n        var half_indent = full_indent.length + 1 >> 1;\n        var last;\n        var line_end = 0;\n        var line_fixed = true;\n        var mappings = options.source_map && [];\n        var mapping_name;\n        var mapping_token;\n        var might_need_space;\n        var might_need_semicolon;\n        var need_newline_indented = false;\n        var need_space = false;\n        var output;\n        var stack;\n        var stored = \"\";\n\n        function reset() {\n            last = \"\";\n            might_need_space = false;\n            might_need_semicolon = false;\n            stack = [];\n            var str = output;\n            output = \"\";\n            return str;\n        }\n\n        reset();\n        var to_utf8 = options.ascii_only ? function(str, identifier) {\n            if (identifier) str = str.replace(/[\\ud800-\\udbff][\\udc00-\\udfff]/g, function(ch) {\n                return \"\\\\u{\" + (ch.charCodeAt(0) - 0xd7c0 << 10 | ch.charCodeAt(1) - 0xdc00).toString(16) + \"}\";\n            });\n            return str.replace(/[\\u0000-\\u001f\\u007f-\\uffff]/g, function(ch) {\n                var code = ch.charCodeAt(0).toString(16);\n                if (code.length <= 2 && !identifier) {\n                    while (code.length < 2) code = \"0\" + code;\n                    return \"\\\\x\" + code;\n                } else {\n                    while (code.length < 4) code = \"0\" + code;\n                    return \"\\\\u\" + code;\n                }\n            });\n        } : function(str) {\n            var s = \"\";\n            for (var i = 0, j = 0; i < str.length; i++) {\n                var code = str.charCodeAt(i);\n                if (is_surrogate_pair_head(code)) {\n                    if (is_surrogate_pair_tail(str.charCodeAt(i + 1))) {\n                        i++;\n                        continue;\n                    }\n                } else if (!is_surrogate_pair_tail(code)) {\n                    continue;\n                }\n                s += str.slice(j, i) + \"\\\\u\" + code.toString(16);\n                j = i + 1;\n            }\n            return j == 0 ? str : s + str.slice(j);\n        };\n\n        function quote_single(str) {\n            return \"'\" + str.replace(/\\x27/g, \"\\\\'\") + \"'\";\n        }\n\n        function quote_double(str) {\n            return '\"' + str.replace(/\\x22/g, '\\\\\"') + '\"';\n        }\n\n        var quote_string = [\n            null,\n            quote_single,\n            quote_double,\n            function(str, quote) {\n                return quote == \"'\" ? quote_single(str) : quote_double(str);\n            },\n        ][options.quote_style] || function(str, quote, dq, sq) {\n            return dq > sq ? quote_single(str) : quote_double(str);\n        };\n\n        function make_string(str, quote) {\n            var dq = 0, sq = 0;\n            str = str.replace(/[\\\\\\b\\f\\n\\r\\v\\t\\x22\\x27\\u2028\\u2029\\0\\ufeff]/g, function(s, i) {\n                switch (s) {\n                  case '\"': ++dq; return '\"';\n                  case \"'\": ++sq; return \"'\";\n                  case \"\\\\\": return \"\\\\\\\\\";\n                  case \"\\n\": return \"\\\\n\";\n                  case \"\\r\": return \"\\\\r\";\n                  case \"\\t\": return \"\\\\t\";\n                  case \"\\b\": return \"\\\\b\";\n                  case \"\\f\": return \"\\\\f\";\n                  case \"\\x0B\": return options.ie ? \"\\\\x0B\" : \"\\\\v\";\n                  case \"\\u2028\": return \"\\\\u2028\";\n                  case \"\\u2029\": return \"\\\\u2029\";\n                  case \"\\ufeff\": return \"\\\\ufeff\";\n                  case \"\\0\":\n                      return /[0-9]/.test(str.charAt(i+1)) ? \"\\\\x00\" : \"\\\\0\";\n                }\n                return s;\n            });\n            return quote_string(to_utf8(str), quote, dq, sq);\n        }\n\n        /* -----[ beautification/minification ]----- */\n\n        var adjust_mappings = mappings ? function(line, col) {\n            mappings.forEach(function(mapping) {\n                mapping.line += line;\n                mapping.col += col;\n            });\n        } : noop;\n\n        var flush_mappings = mappings ? function() {\n            mappings.forEach(function(mapping) {\n                options.source_map.add(\n                    mapping.token.file,\n                    mapping.line, mapping.col,\n                    mapping.token.line, mapping.token.col,\n                    !mapping.name && mapping.token.type == \"name\" ? mapping.token.value : mapping.name\n                );\n            });\n            mappings = [];\n        } : noop;\n\n        function insert_newlines(count) {\n            stored += output.slice(0, line_end);\n            output = output.slice(line_end);\n            var new_col = output.length;\n            adjust_mappings(count, new_col - current_col);\n            current_line += count;\n            current_col = new_col;\n            while (count--) stored += \"\\n\";\n        }\n\n        var fix_line = options.max_line_len ? function(flush) {\n            if (line_fixed) {\n                if (current_col > options.max_line_len) {\n                    AST_Node.warn(\"Output exceeds {max_line_len} characters\", options);\n                }\n                return;\n            }\n            if (current_col > options.max_line_len) {\n                insert_newlines(1);\n                line_fixed = true;\n            }\n            if (line_fixed || flush) flush_mappings();\n        } : noop;\n\n        var require_semicolon = makePredicate(\"( [ + * / - , .\");\n\n        function require_space(prev, ch, str) {\n            return is_identifier_char(prev) && (is_identifier_char(ch) || ch == \"\\\\\")\n                || (ch == \"/\" && ch == prev)\n                || ((ch == \"+\" || ch == \"-\") && ch == last)\n                || last == \"--\" && ch == \">\"\n                || last == \"!\" && str == \"--\"\n                || prev == \"/\" && (str == \"in\" || str == \"instanceof\");\n        }\n\n        var print = options.beautify\n            || options.comments\n            || options.max_line_len\n            || options.preserve_line\n            || options.shebang\n            || !options.semicolons\n            || options.source_map\n            || options.width ? function(str) {\n            var ch = str.charAt(0);\n            if (need_newline_indented && ch) {\n                need_newline_indented = false;\n                if (ch != \"\\n\") {\n                    print(\"\\n\");\n                    indent();\n                }\n            }\n            if (need_space && ch) {\n                need_space = false;\n                if (!/[\\s;})]/.test(ch)) {\n                    space();\n                }\n            }\n            var prev = last.slice(-1);\n            if (might_need_semicolon) {\n                might_need_semicolon = false;\n                if (prev == \":\" && ch == \"}\" || prev != \";\" && (!ch || \";}\".indexOf(ch) < 0)) {\n                    var need_semicolon = require_semicolon[ch];\n                    if (need_semicolon || options.semicolons) {\n                        output += \";\";\n                        current_col++;\n                        if (!line_fixed) {\n                            fix_line();\n                            if (line_fixed && !need_semicolon && output == \";\") {\n                                output = \"\";\n                                current_col = 0;\n                            }\n                        }\n                        if (line_end == output.length - 1) line_end++;\n                    } else {\n                        fix_line();\n                        output += \"\\n\";\n                        current_line++;\n                        current_col = 0;\n                        // reset the semicolon flag, since we didn't print one\n                        // now and might still have to later\n                        if (/^\\s+$/.test(str)) might_need_semicolon = true;\n                    }\n                    if (!options.beautify) might_need_space = false;\n                }\n            }\n\n            if (might_need_space) {\n                if (require_space(prev, ch, str)) {\n                    output += \" \";\n                    current_col++;\n                }\n                if (prev != \"<\" || str != \"!\") might_need_space = false;\n            }\n\n            if (mapping_token) {\n                mappings.push({\n                    token: mapping_token,\n                    name: mapping_name,\n                    line: current_line,\n                    col: current_col,\n                });\n                mapping_token = false;\n                if (line_fixed) flush_mappings();\n            }\n\n            output += str;\n            var a = str.split(/\\r?\\n/), n = a.length - 1;\n            current_line += n;\n            current_col += a[0].length;\n            if (n > 0) {\n                fix_line();\n                current_col = a[n].length;\n            }\n            last = str;\n        } : function(str) {\n            var ch = str.charAt(0);\n            var prev = last.slice(-1);\n            if (might_need_semicolon) {\n                might_need_semicolon = false;\n                if (prev == \":\" && ch == \"}\" || (!ch || \";}\".indexOf(ch) < 0) && prev != \";\") {\n                    output += \";\";\n                    might_need_space = false;\n                }\n            }\n            if (might_need_space) {\n                if (require_space(prev, ch, str)) output += \" \";\n                if (prev != \"<\" || str != \"!\") might_need_space = false;\n            }\n            output += str;\n            last = str;\n        };\n\n        var space = options.beautify ? function() {\n            print(\" \");\n        } : function() {\n            might_need_space = true;\n        };\n\n        var indent = options.beautify ? function(half) {\n            if (need_newline_indented) print(\"\\n\");\n            print(half ? current_indent.slice(0, -half_indent) : current_indent);\n        } : noop;\n\n        var with_indent = options.beautify ? function(cont) {\n            var save_indentation = current_indent;\n            current_indent += full_indent;\n            cont();\n            current_indent = save_indentation;\n        } : function(cont) { cont() };\n\n        var may_add_newline = options.max_line_len || options.preserve_line ? function() {\n            fix_line();\n            line_end = output.length;\n            line_fixed = false;\n        } : noop;\n\n        var newline = options.beautify ? function() {\n            print(\"\\n\");\n            line_end = output.length;\n        } : may_add_newline;\n\n        var semicolon = options.beautify ? function() {\n            print(\";\");\n        } : function() {\n            might_need_semicolon = true;\n        };\n\n        function force_semicolon() {\n            if (might_need_semicolon) print(\";\");\n            print(\";\");\n        }\n\n        function with_block(cont, end) {\n            print(\"{\");\n            newline();\n            with_indent(cont);\n            add_mapping(end);\n            indent();\n            print(\"}\");\n        }\n\n        function with_parens(cont) {\n            print(\"(\");\n            may_add_newline();\n            cont();\n            may_add_newline();\n            print(\")\");\n        }\n\n        function with_square(cont) {\n            print(\"[\");\n            may_add_newline();\n            cont();\n            may_add_newline();\n            print(\"]\");\n        }\n\n        function comma() {\n            may_add_newline();\n            print(\",\");\n            may_add_newline();\n            space();\n        }\n\n        function colon() {\n            print(\":\");\n            space();\n        }\n\n        var add_mapping = mappings ? function(token, name) {\n            mapping_token = token;\n            mapping_name = name;\n        } : noop;\n\n        function get() {\n            if (!line_fixed) fix_line(true);\n            return stored + output;\n        }\n\n        function has_nlb() {\n            return /(^|\\n) *$/.test(output);\n        }\n\n        function pad_comment(token, force) {\n            if (need_newline_indented) return;\n            if (token.nlb && (force || !has_nlb())) {\n                need_newline_indented = true;\n            } else if (force) {\n                need_space = true;\n            }\n        }\n\n        function print_comment(comment) {\n            var value = comment.value.replace(/[@#]__PURE__/g, \" \");\n            if (/^\\s*$/.test(value) && !/^\\s*$/.test(comment.value)) return false;\n            if (/comment[134]/.test(comment.type)) {\n                print(\"//\" + value);\n                need_newline_indented = true;\n            } else if (comment.type == \"comment2\") {\n                print(\"/*\" + value + \"*/\");\n            }\n            return true;\n        }\n\n        function should_merge_comments(node, parent) {\n            if (parent instanceof AST_Binary) return parent.left === node;\n            if (parent.TYPE == \"Call\") return parent.expression === node;\n            if (parent instanceof AST_Conditional) return parent.condition === node;\n            if (parent instanceof AST_Dot) return parent.expression === node;\n            if (parent instanceof AST_Exit) return true;\n            if (parent instanceof AST_Sequence) return parent.expressions[0] === node;\n            if (parent instanceof AST_Sub) return parent.expression === node;\n            if (parent instanceof AST_UnaryPostfix) return true;\n            if (parent instanceof AST_Yield) return true;\n        }\n\n        function prepend_comments(node) {\n            var self = this;\n            var scan;\n            if (node instanceof AST_Exit) {\n                scan = node.value;\n            } else if (node instanceof AST_Yield) {\n                scan = node.expression;\n            }\n            var comments = dump(node);\n            if (!comments) comments = [];\n\n            if (scan) {\n                var tw = new TreeWalker(function(node) {\n                    if (!should_merge_comments(node, tw.parent())) return true;\n                    var before = dump(node);\n                    if (before) comments = comments.concat(before);\n                });\n                tw.push(node);\n                scan.walk(tw);\n            }\n\n            if (current_line == 1 && current_col == 0) {\n                if (comments.length > 0 && options.shebang && comments[0].type == \"comment5\") {\n                    print(\"#!\" + comments.shift().value + \"\\n\");\n                    indent();\n                }\n                var preamble = options.preamble;\n                if (preamble) print(preamble.replace(/\\r\\n?|\\u2028|\\u2029|(^|\\S)\\s*$/g, \"$1\\n\"));\n            }\n\n            comments = comments.filter(comment_filter, node);\n            var printed = false;\n            comments.forEach(function(comment, index) {\n                pad_comment(comment, index);\n                if (print_comment(comment)) printed = true;\n            });\n            if (printed) pad_comment(node.start, true);\n\n            function dump(node) {\n                var token = node.start;\n                if (!token) {\n                    if (!scan) return;\n                    node.start = token = new AST_Token();\n                }\n                var comments = token.comments_before;\n                if (!comments) {\n                    if (!scan) return;\n                    token.comments_before = comments = [];\n                }\n                if (comments._dumped === self) return;\n                comments._dumped = self;\n                return comments;\n            }\n        }\n\n        function append_comments(node, tail) {\n            var self = this;\n            var token = node.end;\n            if (!token) return;\n            var comments = token[tail ? \"comments_before\" : \"comments_after\"];\n            if (!comments || comments._dumped === self) return;\n            if (!(node instanceof AST_Statement || all(comments, function(c) {\n                return !/comment[134]/.test(c.type);\n            }))) return;\n            comments._dumped = self;\n            comments.filter(comment_filter, node).forEach(function(comment, index) {\n                pad_comment(comment, index || !tail);\n                print_comment(comment);\n            });\n        }\n\n        return {\n            get             : get,\n            reset           : reset,\n            indent          : indent,\n            should_break    : options.beautify && options.width ? function() {\n                return current_col >= options.width;\n            } : return_false,\n            has_parens      : function() { return last.slice(-1) == \"(\" },\n            newline         : newline,\n            print           : print,\n            space           : space,\n            comma           : comma,\n            colon           : colon,\n            last            : function() { return last },\n            semicolon       : semicolon,\n            force_semicolon : force_semicolon,\n            to_utf8         : to_utf8,\n            print_name      : function(name) { print(to_utf8(name.toString(), true)) },\n            print_string    : options.inline_script ? function(str, quote) {\n                str = make_string(str, quote).replace(/<\\x2f(script)([>\\/\\t\\n\\f\\r ])/gi, \"<\\\\/$1$2\");\n                print(str.replace(/\\x3c!--/g, \"\\\\x3c!--\").replace(/--\\x3e/g, \"--\\\\x3e\"));\n            } : function(str, quote) {\n                print(make_string(str, quote));\n            },\n            with_indent     : with_indent,\n            with_block      : with_block,\n            with_parens     : with_parens,\n            with_square     : with_square,\n            add_mapping     : add_mapping,\n            option          : function(opt) { return options[opt] },\n            prepend_comments: options.comments || options.shebang ? prepend_comments : noop,\n            append_comments : options.comments ? append_comments : noop,\n            push_node       : function(node) { stack.push(node) },\n            pop_node        : options.preserve_line ? function() {\n                var node = stack.pop();\n                if (node.start && node.start.line > current_line) {\n                    insert_newlines(node.start.line - current_line);\n                }\n            } : function() {\n                stack.pop();\n            },\n            parent          : function(n) {\n                return stack[stack.length - 2 - (n || 0)];\n            },\n        };\n    }\n\n    /* -----[ code generators ]----- */\n\n    (function() {\n\n        /* -----[ utils ]----- */\n\n        function DEFPRINT(nodetype, generator) {\n            nodetype.DEFMETHOD(\"_codegen\", generator);\n        }\n\n        var use_asm = false;\n\n        AST_Node.DEFMETHOD(\"print\", function(stream, force_parens) {\n            var self = this;\n            stream.push_node(self);\n            if (force_parens || self.needs_parens(stream)) {\n                stream.with_parens(doit);\n            } else {\n                doit();\n            }\n            stream.pop_node();\n\n            function doit() {\n                stream.prepend_comments(self);\n                self.add_source_map(stream);\n                self._codegen(stream);\n                stream.append_comments(self);\n            }\n        });\n        var readonly = OutputStream({\n            inline_script: false,\n            shebang: false,\n            width: false,\n        });\n        AST_Node.DEFMETHOD(\"print_to_string\", function(options) {\n            if (options) {\n                var stream = OutputStream(options);\n                this.print(stream);\n                return stream.get();\n            }\n            this.print(readonly);\n            return readonly.reset();\n        });\n\n        /* -----[ PARENTHESES ]----- */\n\n        function PARENS(nodetype, func) {\n            nodetype.DEFMETHOD(\"needs_parens\", func);\n        }\n\n        PARENS(AST_Node, return_false);\n\n        // a function expression needs parens around it when it's provably\n        // the first token to appear in a statement.\n        function needs_parens_function(output) {\n            var p = output.parent();\n            if (!output.has_parens() && first_in_statement(output, false, true)) {\n                // export default function() {}\n                // export default (function foo() {});\n                // export default (function() {})(foo);\n                // export default (function() {})`foo`;\n                // export default (function() {}) ? foo : bar;\n                return this.name || !(p instanceof AST_ExportDefault);\n            }\n            if (output.option(\"webkit\") && p instanceof AST_PropAccess && p.expression === this) return true;\n            if (output.option(\"wrap_iife\") && p instanceof AST_Call && p.expression === this) return true;\n        }\n        PARENS(AST_AsyncFunction, needs_parens_function);\n        PARENS(AST_AsyncGeneratorFunction, needs_parens_function);\n        PARENS(AST_ClassExpression, needs_parens_function);\n        PARENS(AST_Function, needs_parens_function);\n        PARENS(AST_GeneratorFunction, needs_parens_function);\n\n        // same goes for an object literal, because otherwise it would be\n        // interpreted as a block of code.\n        function needs_parens_obj(output) {\n            return !output.has_parens() && first_in_statement(output, true);\n        }\n        PARENS(AST_Object, needs_parens_obj);\n\n        function needs_parens_unary(output) {\n            var p = output.parent();\n            // (-x) ** y\n            if (p instanceof AST_Binary) return p.operator == \"**\" && p.left === this;\n            // (await x)(y)\n            // new (await x)\n            if (p instanceof AST_Call) return p.expression === this;\n            // class extends (x++) {}\n            // class x extends (typeof y) {}\n            if (p instanceof AST_Class) return true;\n            // (x++)[y]\n            // (typeof x).y\n            // https://github.com/mishoo/UglifyJS/issues/115\n            if (p instanceof AST_PropAccess) return p.expression === this;\n            // (~x)`foo`\n            if (p instanceof AST_Template) return p.tag === this;\n        }\n        PARENS(AST_Await, needs_parens_unary);\n        PARENS(AST_Unary, needs_parens_unary);\n\n        PARENS(AST_Sequence, function(output) {\n            var p = output.parent();\n                // [ 1, (2, 3), 4 ] ---> [ 1, 3, 4 ]\n            return p instanceof AST_Array\n                // () ---> (foo, bar)\n                || is_arrow(p) && p.value === this\n                // await (foo, bar)\n                || p instanceof AST_Await\n                // 1 + (2, 3) + 4 ---> 8\n                || p instanceof AST_Binary\n                // new (foo, bar) or foo(1, (2, 3), 4)\n                || p instanceof AST_Call\n                // class extends (foo, bar) {}\n                // class foo extends (bar, baz) {}\n                || p instanceof AST_Class\n                // class { foo = (bar, baz) }\n                // class { [(foo, bar)]() {} }\n                || p instanceof AST_ClassProperty\n                // (false, true) ? (a = 10, b = 20) : (c = 30)\n                // ---> 20 (side effect, set a := 10 and b := 20)\n                || p instanceof AST_Conditional\n                // [ a = (1, 2) ] = [] ---> a == 2\n                || p instanceof AST_DefaultValue\n                // { [(1, 2)]: foo } = bar\n                // { 1: (2, foo) } = bar\n                || p instanceof AST_DestructuredKeyVal\n                // export default (foo, bar)\n                || p instanceof AST_ExportDefault\n                // for (foo of (bar, baz));\n                || p instanceof AST_ForOf\n                // { [(1, 2)]: 3 }[2] ---> 3\n                // { foo: (1, 2) }.foo ---> 2\n                || p instanceof AST_ObjectProperty\n                // (1, {foo:2}).foo or (1, {foo:2})[\"foo\"] ---> 2\n                || p instanceof AST_PropAccess && p.expression === this\n                // ...(foo, bar, baz)\n                || p instanceof AST_Spread\n                // (foo, bar)`baz`\n                || p instanceof AST_Template && p.tag === this\n                // !(foo, bar, baz)\n                || p instanceof AST_Unary\n                // var a = (1, 2), b = a + a; ---> b == 4\n                || p instanceof AST_VarDef\n                // yield (foo, bar)\n                || p instanceof AST_Yield;\n        });\n\n        PARENS(AST_Binary, function(output) {\n            var p = output.parent();\n            // await (foo && bar)\n            if (p instanceof AST_Await) return true;\n            // this deals with precedence:\n            //   3 * (2 + 1)\n            //   3 - (2 - 1)\n            //   (1 ** 2) ** 3\n            if (p instanceof AST_Binary) {\n                var po = p.operator, pp = PRECEDENCE[po];\n                var so = this.operator, sp = PRECEDENCE[so];\n                return pp > sp\n                    || po == \"??\" && (so == \"&&\" || so == \"||\")\n                    || (pp == sp && this === p[po == \"**\" ? \"left\" : \"right\"]);\n            }\n            // (foo && bar)()\n            if (p instanceof AST_Call) return p.expression === this;\n            // class extends (foo && bar) {}\n            // class foo extends (bar || null) {}\n            if (p instanceof AST_Class) return true;\n            // (foo && bar)[\"prop\"], (foo && bar).prop\n            if (p instanceof AST_PropAccess) return p.expression === this;\n            // (foo && bar)``\n            if (p instanceof AST_Template) return p.tag === this;\n            // typeof (foo && bar)\n            if (p instanceof AST_Unary) return true;\n        });\n\n        function need_chain_parens(node, parent) {\n            if (!node.terminal) return false;\n            if (!(parent instanceof AST_Call || parent instanceof AST_PropAccess)) return false;\n            return parent.expression === node;\n        }\n\n        PARENS(AST_PropAccess, function(output) {\n            var node = this;\n            var p = output.parent();\n            // i.e. new (foo().bar)\n            //\n            // if there's one call into this subtree, then we need\n            // parens around it too, otherwise the call will be\n            // interpreted as passing the arguments to the upper New\n            // expression.\n            if (p instanceof AST_New && p.expression === node && root_expr(node).TYPE == \"Call\") return true;\n            // (foo?.bar)()\n            // (foo?.bar).baz\n            // new (foo?.bar)()\n            return need_chain_parens(node, p);\n        });\n\n        PARENS(AST_Call, function(output) {\n            var node = this;\n            var p = output.parent();\n            if (p instanceof AST_New) return p.expression === node;\n            // https://bugs.webkit.org/show_bug.cgi?id=123506\n            if (output.option(\"webkit\")\n                && node.expression instanceof AST_Function\n                && p instanceof AST_PropAccess\n                && p.expression === node) {\n                var g = output.parent(1);\n                if (g instanceof AST_Assign && g.left === p) return true;\n            }\n            // (foo?.())()\n            // (foo?.()).bar\n            // new (foo?.())()\n            return need_chain_parens(node, p);\n        });\n\n        PARENS(AST_New, function(output) {\n            if (need_constructor_parens(this, output)) return false;\n            var p = output.parent();\n            // (new foo)(bar)\n            if (p instanceof AST_Call) return p.expression === this;\n            // (new Date).getTime(), (new Date)[\"getTime\"]()\n            if (p instanceof AST_PropAccess) return true;\n            // (new foo)`bar`\n            if (p instanceof AST_Template) return p.tag === this;\n        });\n\n        PARENS(AST_Number, function(output) {\n            if (!output.option(\"galio\")) return false;\n            // https://github.com/mishoo/UglifyJS/pull/1009\n            var p = output.parent();\n            return p instanceof AST_PropAccess && p.expression === this && /^0/.test(make_num(this.value));\n        });\n\n        function needs_parens_assign_cond(self, output) {\n            var p = output.parent();\n            // await (a = foo)\n            if (p instanceof AST_Await) return true;\n            // 1 + (a = 2) + 3 → 6, side effect setting a = 2\n            if (p instanceof AST_Binary) return !(p instanceof AST_Assign);\n            // (a = func)() —or— new (a = Object)()\n            if (p instanceof AST_Call) return p.expression === self;\n            // class extends (a = foo) {}\n            // class foo extends (bar ? baz : moo) {}\n            if (p instanceof AST_Class) return true;\n            // (a = foo) ? bar : baz\n            if (p instanceof AST_Conditional) return p.condition === self;\n            // (a = foo)[\"prop\"] —or— (a = foo).prop\n            if (p instanceof AST_PropAccess) return p.expression === self;\n            // (a = foo)`bar`\n            if (p instanceof AST_Template) return p.tag === self;\n            // !(a = false) → true\n            if (p instanceof AST_Unary) return true;\n        }\n        PARENS(AST_Arrow, function(output) {\n            return needs_parens_assign_cond(this, output);\n        });\n        PARENS(AST_Assign, function(output) {\n            if (needs_parens_assign_cond(this, output)) return true;\n            //  v8 parser bug   --->     workaround\n            // f([1], [a] = []) ---> f([1], ([a] = []))\n            if (output.option(\"v8\")) return this.left instanceof AST_Destructured;\n            // ({ p: a } = o);\n            if (this.left instanceof AST_DestructuredObject) return needs_parens_obj(output);\n        });\n        PARENS(AST_AsyncArrow, function(output) {\n            return needs_parens_assign_cond(this, output);\n        });\n        PARENS(AST_Conditional, function(output) {\n            return needs_parens_assign_cond(this, output)\n                // https://github.com/mishoo/UglifyJS/issues/1144\n                || output.option(\"extendscript\") && output.parent() instanceof AST_Conditional;\n        });\n        PARENS(AST_Yield, function(output) {\n            return needs_parens_assign_cond(this, output);\n        });\n\n        /* -----[ PRINTERS ]----- */\n\n        DEFPRINT(AST_Directive, function(output) {\n            var quote = this.quote;\n            var value = this.value;\n            switch (output.option(\"quote_style\")) {\n              case 0:\n              case 2:\n                if (value.indexOf('\"') == -1) quote = '\"';\n                break;\n              case 1:\n                if (value.indexOf(\"'\") == -1) quote = \"'\";\n                break;\n            }\n            output.print(quote + value + quote);\n            output.semicolon();\n        });\n        DEFPRINT(AST_Debugger, function(output) {\n            output.print(\"debugger\");\n            output.semicolon();\n        });\n\n        /* -----[ statements ]----- */\n\n        function display_body(body, is_toplevel, output, allow_directives) {\n            var last = body.length - 1;\n            var in_directive = allow_directives;\n            var was_asm = use_asm;\n            body.forEach(function(stmt, i) {\n                if (in_directive) {\n                    if (stmt instanceof AST_Directive) {\n                        if (stmt.value == \"use asm\") use_asm = true;\n                    } else if (!(stmt instanceof AST_EmptyStatement)) {\n                        if (stmt instanceof AST_SimpleStatement && stmt.body instanceof AST_String) {\n                            output.force_semicolon();\n                        }\n                        in_directive = false;\n                    }\n                }\n                if (stmt instanceof AST_EmptyStatement) return;\n                output.indent();\n                stmt.print(output);\n                if (i == last && is_toplevel) return;\n                output.newline();\n                if (is_toplevel) output.newline();\n            });\n            use_asm = was_asm;\n        }\n\n        DEFPRINT(AST_Toplevel, function(output) {\n            display_body(this.body, true, output, true);\n            output.print(\"\");\n        });\n        DEFPRINT(AST_LabeledStatement, function(output) {\n            this.label.print(output);\n            output.colon();\n            this.body.print(output);\n        });\n        DEFPRINT(AST_SimpleStatement, function(output) {\n            this.body.print(output);\n            output.semicolon();\n        });\n        function print_braced_empty(self, output) {\n            output.print(\"{\");\n            output.with_indent(function() {\n                output.append_comments(self, true);\n            });\n            output.print(\"}\");\n        }\n        function print_braced(self, output, allow_directives) {\n            if (self.body.length > 0) {\n                output.with_block(function() {\n                    display_body(self.body, false, output, allow_directives);\n                }, self.end);\n            } else print_braced_empty(self, output);\n        }\n        DEFPRINT(AST_BlockStatement, function(output) {\n            print_braced(this, output);\n        });\n        DEFPRINT(AST_EmptyStatement, function(output) {\n            output.semicolon();\n        });\n        DEFPRINT(AST_Do, function(output) {\n            var self = this;\n            output.print(\"do\");\n            make_block(self.body, output);\n            output.space();\n            output.print(\"while\");\n            output.space();\n            output.with_parens(function() {\n                self.condition.print(output);\n            });\n            output.semicolon();\n        });\n        DEFPRINT(AST_While, function(output) {\n            var self = this;\n            output.print(\"while\");\n            output.space();\n            output.with_parens(function() {\n                self.condition.print(output);\n            });\n            force_statement(self.body, output);\n        });\n        DEFPRINT(AST_For, function(output) {\n            var self = this;\n            output.print(\"for\");\n            output.space();\n            output.with_parens(function() {\n                if (self.init) {\n                    if (self.init instanceof AST_Definitions) {\n                        self.init.print(output);\n                    } else {\n                        parenthesize_for_no_in(self.init, output, true);\n                    }\n                    output.print(\";\");\n                    output.space();\n                } else {\n                    output.print(\";\");\n                }\n                if (self.condition) {\n                    self.condition.print(output);\n                    output.print(\";\");\n                    output.space();\n                } else {\n                    output.print(\";\");\n                }\n                if (self.step) {\n                    self.step.print(output);\n                }\n            });\n            force_statement(self.body, output);\n        });\n        function print_for_enum(prefix, infix) {\n            return function(output) {\n                var self = this;\n                output.print(prefix);\n                output.space();\n                output.with_parens(function() {\n                    self.init.print(output);\n                    output.space();\n                    output.print(infix);\n                    output.space();\n                    self.object.print(output);\n                });\n                force_statement(self.body, output);\n            };\n        }\n        DEFPRINT(AST_ForAwaitOf, print_for_enum(\"for await\", \"of\"));\n        DEFPRINT(AST_ForIn, print_for_enum(\"for\", \"in\"));\n        DEFPRINT(AST_ForOf, print_for_enum(\"for\", \"of\"));\n        DEFPRINT(AST_With, function(output) {\n            var self = this;\n            output.print(\"with\");\n            output.space();\n            output.with_parens(function() {\n                self.expression.print(output);\n            });\n            force_statement(self.body, output);\n        });\n        DEFPRINT(AST_ExportDeclaration, function(output) {\n            output.print(\"export\");\n            output.space();\n            this.body.print(output);\n        });\n        DEFPRINT(AST_ExportDefault, function(output) {\n            output.print(\"export\");\n            output.space();\n            output.print(\"default\");\n            output.space();\n            var body = this.body;\n            body.print(output);\n            if (body instanceof AST_ClassExpression) {\n                if (!body.name) return;\n            }\n            if (body instanceof AST_DefClass) return;\n            if (body instanceof AST_LambdaDefinition) return;\n            if (body instanceof AST_LambdaExpression) {\n                if (!body.name && !is_arrow(body)) return;\n            }\n            output.semicolon();\n        });\n        function print_alias(alias, output) {\n            var value = alias.value;\n            if (value == \"*\" || is_identifier_string(value)) {\n                output.print_name(value);\n            } else {\n                output.print_string(value, alias.quote);\n            }\n        }\n        DEFPRINT(AST_ExportForeign, function(output) {\n            var self = this;\n            output.print(\"export\");\n            output.space();\n            var len = self.keys.length;\n            if (len == 0) {\n                print_braced_empty(self, output);\n            } else if (self.keys[0].value == \"*\") {\n                print_entry(0);\n            } else output.with_block(function() {\n                output.indent();\n                print_entry(0);\n                for (var i = 1; i < len; i++) {\n                    output.print(\",\");\n                    output.newline();\n                    output.indent();\n                    print_entry(i);\n                }\n                output.newline();\n            }, self.end);\n            output.space();\n            output.print(\"from\");\n            output.space();\n            self.path.print(output);\n            output.semicolon();\n\n            function print_entry(index) {\n                var alias = self.aliases[index];\n                var key = self.keys[index];\n                print_alias(key, output);\n                if (alias.value != key.value) {\n                    output.space();\n                    output.print(\"as\");\n                    output.space();\n                    print_alias(alias, output);\n                }\n            }\n        });\n        DEFPRINT(AST_ExportReferences, function(output) {\n            var self = this;\n            output.print(\"export\");\n            output.space();\n            print_properties(self, output);\n            output.semicolon();\n        });\n        DEFPRINT(AST_Import, function(output) {\n            var self = this;\n            output.print(\"import\");\n            output.space();\n            if (self.default) self.default.print(output);\n            if (self.all) {\n                if (self.default) output.comma();\n                self.all.print(output);\n            }\n            if (self.properties) {\n                if (self.default) output.comma();\n                print_properties(self, output);\n            }\n            if (self.all || self.default || self.properties) {\n                output.space();\n                output.print(\"from\");\n                output.space();\n            }\n            self.path.print(output);\n            output.semicolon();\n        });\n\n        /* -----[ functions ]----- */\n        function print_funargs(self, output) {\n            output.with_parens(function() {\n                self.argnames.forEach(function(arg, i) {\n                    if (i) output.comma();\n                    arg.print(output);\n                });\n                if (self.rest) {\n                    if (self.argnames.length) output.comma();\n                    output.print(\"...\");\n                    self.rest.print(output);\n                }\n            });\n        }\n        function print_arrow(self, output) {\n            var argname = self.argnames.length == 1 && !self.rest && self.argnames[0];\n            if (argname instanceof AST_SymbolFunarg && argname.name != \"yield\") {\n                argname.print(output);\n            } else {\n                print_funargs(self, output);\n            }\n            output.space();\n            output.print(\"=>\");\n            output.space();\n            if (self.value) {\n                self.value.print(output);\n            } else {\n                print_braced(self, output, true);\n            }\n        }\n        DEFPRINT(AST_Arrow, function(output) {\n            print_arrow(this, output);\n        });\n        DEFPRINT(AST_AsyncArrow, function(output) {\n            output.print(\"async\");\n            output.space();\n            print_arrow(this, output);\n        });\n        function print_lambda(self, output) {\n            if (self.name) {\n                output.space();\n                self.name.print(output);\n            }\n            print_funargs(self, output);\n            output.space();\n            print_braced(self, output, true);\n        }\n        DEFPRINT(AST_Lambda, function(output) {\n            output.print(\"function\");\n            print_lambda(this, output);\n        });\n        function print_async(output) {\n            output.print(\"async\");\n            output.space();\n            output.print(\"function\");\n            print_lambda(this, output);\n        }\n        DEFPRINT(AST_AsyncDefun, print_async);\n        DEFPRINT(AST_AsyncFunction, print_async);\n        function print_async_generator(output) {\n            output.print(\"async\");\n            output.space();\n            output.print(\"function*\");\n            print_lambda(this, output);\n        }\n        DEFPRINT(AST_AsyncGeneratorDefun, print_async_generator);\n        DEFPRINT(AST_AsyncGeneratorFunction, print_async_generator);\n        function print_generator(output) {\n            output.print(\"function*\");\n            print_lambda(this, output);\n        }\n        DEFPRINT(AST_GeneratorDefun, print_generator);\n        DEFPRINT(AST_GeneratorFunction, print_generator);\n\n        /* -----[ classes ]----- */\n        DEFPRINT(AST_Class, function(output) {\n            var self = this;\n            output.print(\"class\");\n            if (self.name) {\n                output.space();\n                self.name.print(output);\n            }\n            if (self.extends) {\n                output.space();\n                output.print(\"extends\");\n                output.space();\n                self.extends.print(output);\n            }\n            output.space();\n            print_properties(self, output, true);\n        });\n        DEFPRINT(AST_ClassField, function(output) {\n            var self = this;\n            if (self.static) {\n                output.print(\"static\");\n                output.space();\n            }\n            print_property_key(self, output);\n            if (self.value) {\n                output.space();\n                output.print(\"=\");\n                output.space();\n                self.value.print(output);\n            }\n            output.semicolon();\n        });\n        DEFPRINT(AST_ClassGetter, print_accessor(\"get\"));\n        DEFPRINT(AST_ClassSetter, print_accessor(\"set\"));\n        function print_method(self, output) {\n            var fn = self.value;\n            if (is_async(fn)) {\n                output.print(\"async\");\n                output.space();\n            }\n            if (is_generator(fn)) output.print(\"*\");\n            print_property_key(self, output);\n            print_lambda(self.value, output);\n        }\n        DEFPRINT(AST_ClassMethod, function(output) {\n            var self = this;\n            if (self.static) {\n                output.print(\"static\");\n                output.space();\n            }\n            print_method(self, output);\n        });\n        DEFPRINT(AST_ClassInit, function(output) {\n            output.print(\"static\");\n            output.space();\n            print_braced(this.value, output);\n        });\n\n        /* -----[ jumps ]----- */\n        function print_jump(kind, prop) {\n            return function(output) {\n                output.print(kind);\n                var target = this[prop];\n                if (target) {\n                    output.space();\n                    target.print(output);\n                }\n                output.semicolon();\n            };\n        }\n        DEFPRINT(AST_Return, print_jump(\"return\", \"value\"));\n        DEFPRINT(AST_Throw, print_jump(\"throw\", \"value\"));\n        DEFPRINT(AST_Break, print_jump(\"break\", \"label\"));\n        DEFPRINT(AST_Continue, print_jump(\"continue\", \"label\"));\n\n        /* -----[ if ]----- */\n        function make_then(self, output) {\n            var b = self.body;\n            if (output.option(\"braces\") && !(b instanceof AST_Const || b instanceof AST_Let)\n                || output.option(\"ie\") && b instanceof AST_Do)\n                return make_block(b, output);\n            // The squeezer replaces \"block\"-s that contain only a single\n            // statement with the statement itself; technically, the AST\n            // is correct, but this can create problems when we output an\n            // IF having an ELSE clause where the THEN clause ends in an\n            // IF *without* an ELSE block (then the outer ELSE would refer\n            // to the inner IF).  This function checks for this case and\n            // adds the block braces if needed.\n            if (!b) return output.force_semicolon();\n            while (true) {\n                if (b instanceof AST_If) {\n                    if (!b.alternative) {\n                        make_block(self.body, output);\n                        return;\n                    }\n                    b = b.alternative;\n                } else if (b instanceof AST_StatementWithBody) {\n                    b = b.body;\n                } else break;\n            }\n            force_statement(self.body, output);\n        }\n        DEFPRINT(AST_If, function(output) {\n            var self = this;\n            output.print(\"if\");\n            output.space();\n            output.with_parens(function() {\n                self.condition.print(output);\n            });\n            if (self.alternative) {\n                make_then(self, output);\n                output.space();\n                output.print(\"else\");\n                if (self.alternative instanceof AST_If) {\n                    output.space();\n                    self.alternative.print(output);\n                } else {\n                    force_statement(self.alternative, output);\n                }\n            } else {\n                force_statement(self.body, output);\n            }\n        });\n\n        /* -----[ switch ]----- */\n        DEFPRINT(AST_Switch, function(output) {\n            var self = this;\n            output.print(\"switch\");\n            output.space();\n            output.with_parens(function() {\n                self.expression.print(output);\n            });\n            output.space();\n            var last = self.body.length - 1;\n            if (last < 0) print_braced_empty(self, output);\n            else output.with_block(function() {\n                self.body.forEach(function(branch, i) {\n                    output.indent(true);\n                    branch.print(output);\n                    if (i < last && branch.body.length > 0)\n                        output.newline();\n                });\n            }, self.end);\n        });\n        function print_branch_body(self, output) {\n            output.newline();\n            self.body.forEach(function(stmt) {\n                output.indent();\n                stmt.print(output);\n                output.newline();\n            });\n        }\n        DEFPRINT(AST_Default, function(output) {\n            output.print(\"default:\");\n            print_branch_body(this, output);\n        });\n        DEFPRINT(AST_Case, function(output) {\n            var self = this;\n            output.print(\"case\");\n            output.space();\n            self.expression.print(output);\n            output.print(\":\");\n            print_branch_body(self, output);\n        });\n\n        /* -----[ exceptions ]----- */\n        DEFPRINT(AST_Try, function(output) {\n            var self = this;\n            output.print(\"try\");\n            output.space();\n            print_braced(self, output);\n            if (self.bcatch) {\n                output.space();\n                self.bcatch.print(output);\n            }\n            if (self.bfinally) {\n                output.space();\n                self.bfinally.print(output);\n            }\n        });\n        DEFPRINT(AST_Catch, function(output) {\n            var self = this;\n            output.print(\"catch\");\n            if (self.argname) {\n                output.space();\n                output.with_parens(function() {\n                    self.argname.print(output);\n                });\n            }\n            output.space();\n            print_braced(self, output);\n        });\n        DEFPRINT(AST_Finally, function(output) {\n            output.print(\"finally\");\n            output.space();\n            print_braced(this, output);\n        });\n\n        function print_definitions(type) {\n            return function(output) {\n                var self = this;\n                output.print(type);\n                output.space();\n                self.definitions.forEach(function(def, i) {\n                    if (i) output.comma();\n                    def.print(output);\n                });\n                var p = output.parent();\n                if (!(p instanceof AST_IterationStatement && p.init === self)) output.semicolon();\n            };\n        }\n        DEFPRINT(AST_Const, print_definitions(\"const\"));\n        DEFPRINT(AST_Let, print_definitions(\"let\"));\n        DEFPRINT(AST_Var, print_definitions(\"var\"));\n\n        function parenthesize_for_no_in(node, output, no_in) {\n            var parens = false;\n            // need to take some precautions here:\n            //    https://github.com/mishoo/UglifyJS/issues/60\n            if (no_in) node.walk(new TreeWalker(function(node) {\n                if (parens) return true;\n                if (node instanceof AST_Binary && node.operator == \"in\") return parens = true;\n                if (node instanceof AST_Scope && !(is_arrow(node) && node.value)) return true;\n            }));\n            node.print(output, parens);\n        }\n\n        DEFPRINT(AST_VarDef, function(output) {\n            var self = this;\n            self.name.print(output);\n            if (self.value) {\n                output.space();\n                output.print(\"=\");\n                output.space();\n                var p = output.parent(1);\n                var no_in = p instanceof AST_For || p instanceof AST_ForEnumeration;\n                parenthesize_for_no_in(self.value, output, no_in);\n            }\n        });\n\n        DEFPRINT(AST_DefaultValue, function(output) {\n            var self = this;\n            self.name.print(output);\n            output.space();\n            output.print(\"=\");\n            output.space();\n            self.value.print(output);\n        });\n\n        /* -----[ other expressions ]----- */\n        function print_annotation(self, output) {\n            if (!output.option(\"annotations\")) return;\n            if (!self.pure) return;\n            var level = 0, parent = self, node;\n            do {\n                node = parent;\n                parent = output.parent(level++);\n                if (parent instanceof AST_Call && parent.expression === node) return;\n            } while (parent instanceof AST_PropAccess && parent.expression === node);\n            output.print(\"/*@__PURE__*/\");\n        }\n        function print_call_args(self, output) {\n            output.with_parens(function() {\n                self.args.forEach(function(expr, i) {\n                    if (i) output.comma();\n                    expr.print(output);\n                });\n                output.add_mapping(self.end);\n            });\n        }\n        DEFPRINT(AST_Call, function(output) {\n            var self = this;\n            print_annotation(self, output);\n            self.expression.print(output);\n            if (self.optional) output.print(\"?.\");\n            print_call_args(self, output);\n        });\n        DEFPRINT(AST_New, function(output) {\n            var self = this;\n            print_annotation(self, output);\n            output.print(\"new\");\n            output.space();\n            self.expression.print(output);\n            if (need_constructor_parens(self, output)) print_call_args(self, output);\n        });\n        DEFPRINT(AST_Sequence, function(output) {\n            this.expressions.forEach(function(node, index) {\n                if (index > 0) {\n                    output.comma();\n                    if (output.should_break()) {\n                        output.newline();\n                        output.indent();\n                    }\n                }\n                node.print(output);\n            });\n        });\n        DEFPRINT(AST_Dot, function(output) {\n            var self = this;\n            var expr = self.expression;\n            expr.print(output);\n            var prop = self.property;\n            if (output.option(\"ie\") && RESERVED_WORDS[prop] || self.quoted && output.option(\"keep_quoted_props\")) {\n                if (self.optional) output.print(\"?.\");\n                output.with_square(function() {\n                    output.add_mapping(self.end);\n                    output.print_string(prop);\n                });\n            } else {\n                if (expr instanceof AST_Number && !/[ex.)]/i.test(output.last())) output.print(\".\");\n                output.print(self.optional ? \"?.\" : \".\");\n                // the name after dot would be mapped about here.\n                output.add_mapping(self.end);\n                output.print_name(prop);\n            }\n        });\n        DEFPRINT(AST_Sub, function(output) {\n            var self = this;\n            self.expression.print(output);\n            if (self.optional) output.print(\"?.\");\n            output.with_square(function() {\n                self.property.print(output);\n            });\n        });\n        DEFPRINT(AST_Spread, function(output) {\n            output.print(\"...\");\n            this.expression.print(output);\n        });\n        DEFPRINT(AST_UnaryPrefix, function(output) {\n            var op = this.operator;\n            var exp = this.expression;\n            output.print(op);\n            if (/^[a-z]/i.test(op)\n                || (/[+-]$/.test(op)\n                    && exp instanceof AST_UnaryPrefix\n                    && /^[+-]/.test(exp.operator))) {\n                output.space();\n            }\n            exp.print(output);\n        });\n        DEFPRINT(AST_UnaryPostfix, function(output) {\n            var self = this;\n            self.expression.print(output);\n            output.add_mapping(self.end);\n            output.print(self.operator);\n        });\n        DEFPRINT(AST_Binary, function(output) {\n            var self = this;\n            self.left.print(output);\n            output.space();\n            output.print(self.operator);\n            output.space();\n            self.right.print(output);\n        });\n        DEFPRINT(AST_Conditional, function(output) {\n            var self = this;\n            self.condition.print(output);\n            output.space();\n            output.print(\"?\");\n            output.space();\n            self.consequent.print(output);\n            output.space();\n            output.colon();\n            self.alternative.print(output);\n        });\n        DEFPRINT(AST_Await, function(output) {\n            output.print(\"await\");\n            output.space();\n            this.expression.print(output);\n        });\n        DEFPRINT(AST_Yield, function(output) {\n            output.print(this.nested ? \"yield*\" : \"yield\");\n            if (this.expression) {\n                output.space();\n                this.expression.print(output);\n            }\n        });\n\n        /* -----[ literals ]----- */\n        DEFPRINT(AST_Array, function(output) {\n            var a = this.elements, len = a.length;\n            output.with_square(len > 0 ? function() {\n                output.space();\n                a.forEach(function(exp, i) {\n                    if (i) output.comma();\n                    exp.print(output);\n                    // If the final element is a hole, we need to make sure it\n                    // doesn't look like a trailing comma, by inserting an actual\n                    // trailing comma.\n                    if (i === len - 1 && exp instanceof AST_Hole)\n                      output.comma();\n                });\n                output.space();\n            } : noop);\n        });\n        DEFPRINT(AST_DestructuredArray, function(output) {\n            var a = this.elements, len = a.length, rest = this.rest;\n            output.with_square(len || rest ? function() {\n                output.space();\n                a.forEach(function(exp, i) {\n                    if (i) output.comma();\n                    exp.print(output);\n                });\n                if (rest) {\n                    if (len) output.comma();\n                    output.print(\"...\");\n                    rest.print(output);\n                } else if (a[len - 1] instanceof AST_Hole) {\n                    // If the final element is a hole, we need to make sure it\n                    // doesn't look like a trailing comma, by inserting an actual\n                    // trailing comma.\n                    output.comma();\n                }\n                output.space();\n            } : noop);\n        });\n        DEFPRINT(AST_DestructuredKeyVal, function(output) {\n            var self = this;\n            var key = print_property_key(self, output);\n            var value = self.value;\n            if (key) {\n                if (value instanceof AST_DefaultValue) {\n                    if (value.name instanceof AST_Symbol && key == get_symbol_name(value.name)) {\n                        output.space();\n                        output.print(\"=\");\n                        output.space();\n                        value.value.print(output);\n                        return;\n                    }\n                } else if (value instanceof AST_Symbol) {\n                    if (key == get_symbol_name(value)) return;\n                }\n            }\n            output.colon();\n            value.print(output);\n        });\n        DEFPRINT(AST_DestructuredObject, function(output) {\n            var self = this;\n            var props = self.properties, len = props.length, rest = self.rest;\n            if (len || rest) output.with_block(function() {\n                props.forEach(function(prop, i) {\n                    if (i) {\n                        output.print(\",\");\n                        output.newline();\n                    }\n                    output.indent();\n                    prop.print(output);\n                });\n                if (rest) {\n                    if (len) {\n                        output.print(\",\");\n                        output.newline();\n                    }\n                    output.indent();\n                    output.print(\"...\");\n                    rest.print(output);\n                }\n                output.newline();\n            }, self.end);\n            else print_braced_empty(self, output);\n        });\n        function print_properties(self, output, no_comma) {\n            var props = self.properties;\n            if (props.length > 0) output.with_block(function() {\n                props.forEach(function(prop, i) {\n                    if (i) {\n                        if (!no_comma) output.print(\",\");\n                        output.newline();\n                    }\n                    output.indent();\n                    prop.print(output);\n                });\n                output.newline();\n            }, self.end);\n            else print_braced_empty(self, output);\n        }\n        DEFPRINT(AST_Object, function(output) {\n            print_properties(this, output);\n        });\n\n        function print_property_key(self, output) {\n            var key = self.key;\n            if (key instanceof AST_Node) return output.with_square(function() {\n                key.print(output);\n            });\n            var quote = self.start && self.start.quote;\n            if (output.option(\"quote_keys\") || quote && output.option(\"keep_quoted_props\")) {\n                output.print_string(key, quote);\n            } else if (\"\" + +key == key && key >= 0) {\n                output.print(make_num(key));\n            } else if (self.private) {\n                output.print_name(key);\n            } else if (RESERVED_WORDS[key] ? !output.option(\"ie\") : is_identifier_string(key)) {\n                output.print_name(key);\n                return key;\n            } else {\n                output.print_string(key, quote);\n            }\n        }\n        DEFPRINT(AST_ObjectKeyVal, function(output) {\n            var self = this;\n            print_property_key(self, output);\n            output.colon();\n            self.value.print(output);\n        });\n        DEFPRINT(AST_ObjectMethod, function(output) {\n            print_method(this, output);\n        });\n        function print_accessor(type) {\n            return function(output) {\n                var self = this;\n                if (self.static) {\n                    output.print(\"static\");\n                    output.space();\n                }\n                output.print(type);\n                output.space();\n                print_property_key(self, output);\n                print_lambda(self.value, output);\n            };\n        }\n        DEFPRINT(AST_ObjectGetter, print_accessor(\"get\"));\n        DEFPRINT(AST_ObjectSetter, print_accessor(\"set\"));\n        function get_symbol_name(sym) {\n            var def = sym.definition();\n            return def && def.mangled_name || sym.name;\n        }\n        DEFPRINT(AST_Symbol, function(output) {\n            output.print_name(get_symbol_name(this));\n        });\n        DEFPRINT(AST_SymbolExport, function(output) {\n            var self = this;\n            var name = get_symbol_name(self);\n            output.print_name(name);\n            var alias = self.alias;\n            if (alias.value != name) {\n                output.space();\n                output.print(\"as\");\n                output.space();\n                print_alias(alias, output);\n            }\n        });\n        DEFPRINT(AST_SymbolImport, function(output) {\n            var self = this;\n            var name = get_symbol_name(self);\n            var key = self.key;\n            if (key.value && key.value != name) {\n                print_alias(key, output);\n                output.space();\n                output.print(\"as\");\n                output.space();\n            }\n            output.print_name(name);\n        });\n        DEFPRINT(AST_Hole, noop);\n        DEFPRINT(AST_Template, function(output) {\n            var self = this;\n            if (self.tag) self.tag.print(output);\n            output.print(\"`\");\n            for (var i = 0; i < self.expressions.length; i++) {\n                output.print(self.strings[i]);\n                output.print(\"${\");\n                self.expressions[i].print(output);\n                output.print(\"}\");\n            }\n            output.print(self.strings[i]);\n            output.print(\"`\");\n        });\n        DEFPRINT(AST_Constant, function(output) {\n            output.print(\"\" + this.value);\n        });\n        DEFPRINT(AST_String, function(output) {\n            output.print_string(this.value, this.quote);\n        });\n        DEFPRINT(AST_Number, function(output) {\n            var start = this.start;\n            if (use_asm && start && start.raw != null) {\n                output.print(start.raw);\n            } else {\n                output.print(make_num(this.value));\n            }\n        });\n\n        DEFPRINT(AST_RegExp, function(output) {\n            var regexp = this.value;\n            var str = regexp.toString();\n            var end = str.lastIndexOf(\"/\");\n            if (regexp.raw_source) {\n                str = \"/\" + regexp.raw_source + str.slice(end);\n            } else if (end == 1) {\n                str = \"/(?:)\" + str.slice(end);\n            } else if (str.indexOf(\"/\", 1) < end) {\n                str = \"/\" + str.slice(1, end).replace(/\\\\\\\\|[^/]?\\//g, function(match) {\n                    return match[0] == \"\\\\\" ? match : match.slice(0, -1) + \"\\\\/\";\n                }) + str.slice(end);\n            }\n            output.print(output.to_utf8(str).replace(/\\\\(?:\\0(?![0-9])|[^\\0])/g, function(match) {\n                switch (match[1]) {\n                  case \"\\n\": return \"\\\\n\";\n                  case \"\\r\": return \"\\\\r\";\n                  case \"\\t\": return \"\\t\";\n                  case \"\\b\": return \"\\b\";\n                  case \"\\f\": return \"\\f\";\n                  case \"\\0\": return \"\\0\";\n                  case \"\\x0B\": return \"\\v\";\n                  case \"\\u2028\": return \"\\\\u2028\";\n                  case \"\\u2029\": return \"\\\\u2029\";\n                  default: return match;\n                }\n            }).replace(/[\\n\\r\\u2028\\u2029]/g, function(c) {\n                switch (c) {\n                  case \"\\n\": return \"\\\\n\";\n                  case \"\\r\": return \"\\\\r\";\n                  case \"\\u2028\": return \"\\\\u2028\";\n                  case \"\\u2029\": return \"\\\\u2029\";\n                }\n            }));\n        });\n\n        function force_statement(stat, output) {\n            if (output.option(\"braces\") && !(stat instanceof AST_Const || stat instanceof AST_Let)) {\n                make_block(stat, output);\n            } else if (stat instanceof AST_EmptyStatement) {\n                output.force_semicolon();\n            } else {\n                output.space();\n                stat.print(output);\n            }\n        }\n\n        // self should be AST_New.  decide if we want to show parens or not.\n        function need_constructor_parens(self, output) {\n            // Always print parentheses with arguments\n            if (self.args.length > 0) return true;\n\n            return output.option(\"beautify\");\n        }\n\n        function best_of(a) {\n            var best = a[0], len = best.length;\n            for (var i = 1; i < a.length; ++i) {\n                if (a[i].length < len) {\n                    best = a[i];\n                    len = best.length;\n                }\n            }\n            return best;\n        }\n\n        function make_num(num) {\n            var str = num.toString(10).replace(/^0\\./, \".\").replace(\"e+\", \"e\");\n            var candidates = [ str ];\n            if (Math.floor(num) === num) {\n                if (num < 0) {\n                    candidates.push(\"-0x\" + (-num).toString(16).toLowerCase());\n                } else {\n                    candidates.push(\"0x\" + num.toString(16).toLowerCase());\n                }\n            }\n            var match, len, digits;\n            if (match = /^\\.0+/.exec(str)) {\n                len = match[0].length;\n                digits = str.slice(len);\n                candidates.push(digits + \"e-\" + (digits.length + len - 1));\n            } else if (match = /[^0]0+$/.exec(str)) {\n                len = match[0].length - 1;\n                candidates.push(str.slice(0, -len) + \"e\" + len);\n            } else if (match = /^(\\d)\\.(\\d+)e(-?\\d+)$/.exec(str)) {\n                candidates.push(match[1] + match[2] + \"e\" + (match[3] - match[2].length));\n            }\n            return best_of(candidates);\n        }\n\n        function make_block(stmt, output) {\n            output.space();\n            if (stmt instanceof AST_EmptyStatement) {\n                print_braced_empty(stmt, output);\n            } else if (stmt instanceof AST_BlockStatement) {\n                stmt.print(output);\n            } else output.with_block(function() {\n                output.indent();\n                stmt.print(output);\n                output.newline();\n            }, stmt.end);\n        }\n\n        /* -----[ source map generators ]----- */\n\n        function DEFMAP(nodetype, generator) {\n            nodetype.forEach(function(nodetype) {\n                nodetype.DEFMETHOD(\"add_source_map\", generator);\n            });\n        }\n\n        DEFMAP([\n            // We could easily add info for ALL nodes, but it seems to me that\n            // would be quite wasteful, hence this noop in the base class.\n            AST_Node,\n            // since the label symbol will mark it\n            AST_LabeledStatement,\n        ], noop);\n\n        // XXX: I'm not exactly sure if we need it for all of these nodes,\n        // or if we should add even more.\n        DEFMAP([\n            AST_Array,\n            AST_Await,\n            AST_BlockStatement,\n            AST_Catch,\n            AST_Constant,\n            AST_Debugger,\n            AST_Definitions,\n            AST_Destructured,\n            AST_Directive,\n            AST_Finally,\n            AST_Jump,\n            AST_Lambda,\n            AST_New,\n            AST_Object,\n            AST_Spread,\n            AST_StatementWithBody,\n            AST_Symbol,\n            AST_Switch,\n            AST_SwitchBranch,\n            AST_Try,\n            AST_UnaryPrefix,\n            AST_Yield,\n        ], function(output) {\n            output.add_mapping(this.start);\n        });\n\n        DEFMAP([\n            AST_ClassProperty,\n            AST_DestructuredKeyVal,\n            AST_ObjectProperty,\n        ], function(output) {\n            if (typeof this.key == \"string\") output.add_mapping(this.start, this.key);\n        });\n    })();\n\n    return {\n        OutputStream\n    }\n});"]}