{"version":3,"sources":["output.js"],"names":["define","m_utils","m_ast","m_parse","defaults","makePredicate","noop","return_false","return_true","AST_Array","AST_Arrow","AST_AsyncArrow","AST_AsyncDefun","AST_AsyncFunction","AST_AsyncGeneratorDefun","AST_AsyncGeneratorFunction","AST_Assign","AST_Await","AST_BigInt","AST_Binary","AST_BlockStatement","AST_Break","AST_Call","AST_Case","AST_Catch","AST_Chain","AST_Class","AST_ClassExpression","AST_ClassField","AST_ClassGetter","AST_ClassInit","AST_ClassMethod","AST_ClassPrivateProperty","AST_ClassProperty","AST_ClassSetter","AST_ClassStaticBlock","AST_ConciseMethod","AST_Conditional","AST_Const","AST_Constant","AST_Continue","AST_Debugger","AST_Default","AST_DefaultAssign","AST_DefaultValue","AST_Definitions","AST_Defun","AST_Destructuring","AST_DestructuredArray","AST_DestructuredKeyVal","AST_DestructuredObject","AST_Destructured","AST_Directive","AST_Do","AST_Dot","AST_DotHash","AST_EmptyStatement","AST_Exit","AST_Expansion","AST_Export","AST_ExportDeclaration","AST_ExportDefault","AST_ExportForeign","AST_ExportReferences","AST_Finally","AST_For","AST_ForAwaitOf","AST_ForIn","AST_ForOf","AST_Function","AST_GeneratorDefun","AST_GeneratorFunction","AST_Hole","AST_If","AST_Import","AST_ImportMeta","AST_Jump","AST_LabeledStatement","AST_Lambda","AST_Let","AST_LoopControl","AST_NameMapping","AST_New","AST_NewTarget","AST_Node","AST_Number","AST_Object","AST_ObjectGetter","AST_ObjectKeyVal","AST_ObjectMethod","AST_ObjectProperty","AST_ObjectSetter","AST_PrefixedTemplateString","AST_PropAccess","AST_PrivateGetter","AST_PrivateMethod","AST_PrivateSetter","AST_PrivateIn","AST_RegExp","AST_Return","AST_Scope","AST_Sequence","AST_SimpleStatement","AST_Spread","AST_Statement","AST_StatementWithBody","AST_String","AST_Sub","AST_Super","AST_Switch","AST_SwitchBranch","AST_Symbol","AST_SymbolClassProperty","AST_SymbolExport","AST_SymbolImport","AST_SymbolMethod","AST_SymbolPrivateProperty","AST_SymbolRef","AST_Template","AST_TemplateSegment","AST_TemplateString","AST_This","AST_Throw","AST_Toplevel","AST_Try","AST_TryBlock","AST_Unary","AST_UnaryPostfix","AST_UnaryPrefix","AST_Var","AST_VarDef","AST_While","AST_With","AST_Yield","TreeWalker","is_arrow","is_generator","walk","walk_abort","first_in_statement","is_identifier_char","is_identifier_string","is_surrogate_pair_head","is_surrogate_pair_tail","PRECEDENCE","RESERVED_WORDS","is_some_comments","comment","type","test","value","OutputStream","options","annotations","ascii_only","beautify","braces","comments","extendscript","galio","ie","indent_level","indent_start","inline_script","keep_quoted_props","max_line_len","preamble","preserve_line","quote_keys","quote_style","semicolons","shebang","source_map","v8","webkit","width","wrap_iife","comment_filter","regex_pos","lastIndexOf","RegExp","substr","this","make_indent","Array","join","Error","JSON","stringify","last","mapping_name","mapping_token","might_need_space","might_need_semicolon","output","stack","current_col","current_line","current_indent","full_indent","half_indent","length","line_end","line_fixed","mappings","need_newline_indented","need_space","stored","reset","str","to_utf8","identifier","replace","ch","charCodeAt","toString","code","s","i","j","slice","quote_single","quote_double","quote_string","quote","dq","sq","make_string","charAt","adjust_mappings","line","col","forEach","mapping","flush_mappings","add","token","file","name","insert_newlines","count","new_col","fix_line","flush","warn","require_semicolon","require_space","prev","print","indent","space","indexOf","need_semicolon","push","a","split","n","half","with_indent","cont","save_indentation","may_add_newline","newline","semicolon","add_mapping","pad_comment","force","nlb","print_comment","get","should_break","has_parens","comma","colon","force_semicolon","print_name","print_string","with_block","end","with_parens","with_square","option","opt","prepend_comments","node","scan","self","expression","dump","tw","parent","left","TYPE","condition","expressions","should_merge_comments","before","concat","shift","printed","start","AST_Token","comments_before","_dumped","filter","index","append_comments","tail","all","c","push_node","pop_node","pop","DEFPRINT","nodetype","generator","DEFMETHOD","use_asm","stream","force_parens","doit","add_source_map","_codegen","needs_parens","readonly","PARENS","func","needs_parens_function","p","needs_parens_obj","needs_parens_unary","operator","tag","need_chain_parens","terminal","needs_parens_assign_cond","display_body","body","is_toplevel","allow_directives","in_directive","was_asm","stmt","print_braced_empty","print_braced","print_for_enum","prefix","infix","init","object","force_statement","print_alias","alias","print_funargs","argnames","arg","rest","print_arrow","argname","AST_SymbolFunarg","print_lambda","print_async","print_async_generator","print_generator","print_method","fn","is_async","print_property_key","print_jump","kind","prop","target","print_branch_body","print_definitions","definitions","def","AST_IterationStatement","parenthesize_for_no_in","no_in","parens","print_annotation","pure","level","print_call_args","args","expr","print_properties","no_comma","props","properties","key","make_num","private","print_accessor","static","get_symbol_name","sym","definition","mangled_name","stat","make_block","need_constructor_parens","num","match","len","digits","candidates","Math","floor","toLowerCase","exec","best","best_of","DEFMAP","po","pp","so","sp","root_expr","g","label","step","AST_DefClass","AST_LambdaDefinition","AST_LambdaExpression","keys","print_entry","aliases","path","default","extends","alternative","b","make_then","branch","bcatch","bfinally","AST_ForEnumeration","optional","property","quoted","op","exp","right","consequent","nested","elements","strings","raw","regexp","raw_source"],"mappings":"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","file":"../output.js","sourcesContent":["define([\n    \"./utils\",\n    \"./ast\",\n    \"./parse\"\n],function(m_utils,m_ast,m_parse){\n    /***********************************************************************\n\n      A JavaScript tokenizer / parser / beautifier / compressor.\n      https://github.com/mishoo/UglifyJS\n\n      -------------------------------- (C) ---------------------------------\n\n                               Author: Mihai Bazon\n                             <mihai.bazon@gmail.com>\n                           http://mihai.bazon.net/blog\n\n      Distributed under the BSD license:\n\n        Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n        Redistribution and use in source and binary forms, with or without\n        modification, are permitted provided that the following conditions\n        are met:\n\n            * Redistributions of source code must retain the above\n              copyright notice, this list of conditions and the following\n              disclaimer.\n\n            * Redistributions in binary form must reproduce the above\n              copyright notice, this list of conditions and the following\n              disclaimer in the documentation and/or other materials\n              provided with the distribution.\n\n        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n        EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n        IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n        PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n        LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n        OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n        PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n        PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n        THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n        TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n        THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n        SUCH DAMAGE.\n\n     ***********************************************************************/\n\n    \"use strict\";\n\n     const {\n        defaults,\n        makePredicate,\n        noop,\n        return_false,\n        return_true\n    } = m_utils;\n\n    const {\n        AST_Array,\n        AST_Arrow,\n        AST_AsyncArrow,\n        AST_AsyncDefun,\n        AST_AsyncFunction,   \n        AST_AsyncGeneratorDefun,\n        AST_AsyncGeneratorFunction,     \n        AST_Assign,\n        AST_Await,\n        AST_BigInt,\n        AST_Binary,\n        AST_BlockStatement,\n        AST_Break,\n        AST_Call,\n        AST_Case,\n        AST_Catch,\n        AST_Chain,\n        AST_Class,\n        AST_ClassExpression,\n        AST_ClassField,\n        AST_ClassGetter,\n        AST_ClassInit,\n        AST_ClassMethod,\n        AST_ClassPrivateProperty,\n        AST_ClassProperty,\n        AST_ClassSetter,\n        AST_ClassStaticBlock,\n        AST_ConciseMethod,\n        AST_Conditional,\n        AST_Const,\n        AST_Constant,\n        AST_Continue,\n        AST_Debugger,\n        AST_Default,\n        AST_DefaultAssign,\n        AST_DefaultValue,\n        AST_Definitions,\n        AST_Defun,\n        AST_Destructuring,\n        AST_DestructuredArray,\n        AST_DestructuredKeyVal,\n        AST_DestructuredObject,\n        AST_Destructured,\n        AST_Directive,\n        AST_Do,\n        AST_Dot,\n        AST_DotHash,\n        AST_EmptyStatement,\n        AST_Exit,\n        AST_Expansion,\n        AST_Export,\n        AST_ExportDeclaration,\n        AST_ExportDefault,\n        AST_ExportForeign,\n        AST_ExportReferences,\n        AST_Finally,\n        AST_For,\n        AST_ForAwaitOf,\n        AST_ForIn,\n        AST_ForOf,\n        AST_Function,\n        AST_GeneratorDefun,\n        AST_GeneratorFunction,\n        AST_Hole,\n        AST_If,\n        AST_Import,\n        AST_ImportMeta,\n        AST_Jump,\n        AST_LabeledStatement,\n        AST_Lambda,\n        AST_Let,\n        AST_LoopControl,\n        AST_NameMapping,\n        AST_New,\n        AST_NewTarget,\n        AST_Node,\n        AST_Number,\n        AST_Object,\n        AST_ObjectGetter,\n        AST_ObjectKeyVal,\n        AST_ObjectMethod,\n        AST_ObjectProperty,\n        AST_ObjectSetter,\n        AST_PrefixedTemplateString,\n        AST_PropAccess,\n        AST_PrivateGetter,\n        AST_PrivateMethod,\n        AST_PrivateSetter,\n        AST_PrivateIn,\n        AST_RegExp,\n        AST_Return,\n        AST_Scope,\n        AST_Sequence,\n        AST_SimpleStatement,\n        AST_Spread,\n        AST_Statement,\n        AST_StatementWithBody,\n        AST_String,\n        AST_Sub,\n        AST_Super,\n        AST_Switch,\n        AST_SwitchBranch,\n        AST_Symbol,\n        AST_SymbolClassProperty,\n        AST_SymbolExport,\n        AST_SymbolImport,\n        AST_SymbolMethod,\n        AST_SymbolPrivateProperty,\n        AST_SymbolRef,\n        AST_Template,\n        AST_TemplateSegment,\n        AST_TemplateString,\n        AST_This,\n        AST_Throw,\n        AST_Toplevel,\n        AST_Try,\n        AST_TryBlock,\n        AST_Unary,\n        AST_UnaryPostfix,\n        AST_UnaryPrefix,\n        AST_Var,\n        AST_VarDef,\n        AST_While,\n        AST_With,\n        AST_Yield,\n        TreeWalker,\n\n        is_arrow,\n        is_generator,\n        walk,\n        walk_abort,\n        first_in_statement\n\n    } = m_ast;\n\n    const {\n        is_identifier_char,\n        is_identifier_string,\n        is_surrogate_pair_head,\n        is_surrogate_pair_tail,\n        PRECEDENCE,\n        RESERVED_WORDS\n    } = m_parse;\n   \n\n    function is_some_comments(comment) {\n        // multiline comment\n        return comment.type == \"comment2\" && /@preserve|@license|@cc_on/i.test(comment.value);\n    }\n\n    function OutputStream(options) {\n        options = defaults(options, {\n            annotations      : false,\n            ascii_only       : false,\n            beautify         : false,\n            braces           : false,\n            comments         : false,\n            extendscript     : false,\n            galio            : false,\n            ie               : false,\n            indent_level     : 4,\n            indent_start     : 0,\n            inline_script    : true,\n            keep_quoted_props: false,\n            max_line_len     : false,\n            preamble         : null,\n            preserve_line    : false,\n            quote_keys       : false,\n            quote_style      : 0,\n            semicolons       : true,\n            shebang          : true,\n            source_map       : null,\n            v8               : false,\n            webkit           : false,\n            width            : 80,\n            wrap_iife        : false,\n        }, true);\n\n        // Convert comment option to RegExp if necessary and set up comments filter\n        var comment_filter = return_false; // Default case, throw all comments away\n        if (options.comments) {\n            var comments = options.comments;\n            if (typeof options.comments === \"string\" && /^\\/.*\\/[a-zA-Z]*$/.test(options.comments)) {\n                var regex_pos = options.comments.lastIndexOf(\"/\");\n                comments = new RegExp(\n                    options.comments.substr(1, regex_pos - 1),\n                    options.comments.substr(regex_pos + 1)\n                );\n            }\n            if (comments instanceof RegExp) {\n                comment_filter = function(comment) {\n                    return comment.type != \"comment5\" && comments.test(comment.value);\n                };\n            } else if (typeof comments === \"function\") {\n                comment_filter = function(comment) {\n                    return comment.type != \"comment5\" && comments(this, comment);\n                };\n            } else if (comments === \"some\") {\n                comment_filter = is_some_comments;\n            } else { // NOTE includes \"all\" option\n                comment_filter = return_true;\n            }\n        }\n\n        function make_indent(value) {\n            if (typeof value == \"number\") return new Array(value + 1).join(\" \");\n            if (!value) return \"\";\n            if (!/^\\s*$/.test(value)) throw new Error(\"unsupported indentation: \" + JSON.stringify(\"\" + value));\n            return value;\n        }\n\n        var current_col = 0;\n        var current_line = 1;\n        var current_indent = make_indent(options.indent_start);\n        var full_indent = make_indent(options.indent_level);\n        var half_indent = full_indent.length + 1 >> 1;\n        var last;\n        var line_end = 0;\n        var line_fixed = true;\n        var mappings = options.source_map && [];\n        var mapping_name;\n        var mapping_token;\n        var might_need_space;\n        var might_need_semicolon;\n        var need_newline_indented = false;\n        var need_space = false;\n        var output;\n        var stack;\n        var stored = \"\";\n\n        function reset() {\n            last = \"\";\n            might_need_space = false;\n            might_need_semicolon = false;\n            stack = [];\n            var str = output;\n            output = \"\";\n            return str;\n        }\n\n        reset();\n        var to_utf8 = options.ascii_only ? function(str, identifier) {\n            if (identifier) str = str.replace(/[\\ud800-\\udbff][\\udc00-\\udfff]/g, function(ch) {\n                return \"\\\\u{\" + (ch.charCodeAt(0) - 0xd7c0 << 10 | ch.charCodeAt(1) - 0xdc00).toString(16) + \"}\";\n            });\n            return str.replace(/[\\u0000-\\u001f\\u007f-\\uffff]/g, function(ch) {\n                var code = ch.charCodeAt(0).toString(16);\n                if (code.length <= 2 && !identifier) {\n                    while (code.length < 2) code = \"0\" + code;\n                    return \"\\\\x\" + code;\n                } else {\n                    while (code.length < 4) code = \"0\" + code;\n                    return \"\\\\u\" + code;\n                }\n            });\n        } : function(str) {\n            var s = \"\";\n            for (var i = 0, j = 0; i < str.length; i++) {\n                var code = str.charCodeAt(i);\n                if (is_surrogate_pair_head(code)) {\n                    if (is_surrogate_pair_tail(str.charCodeAt(i + 1))) {\n                        i++;\n                        continue;\n                    }\n                } else if (!is_surrogate_pair_tail(code)) {\n                    continue;\n                }\n                s += str.slice(j, i) + \"\\\\u\" + code.toString(16);\n                j = i + 1;\n            }\n            return j == 0 ? str : s + str.slice(j);\n        };\n\n        function quote_single(str) {\n            return \"'\" + str.replace(/\\x27/g, \"\\\\'\") + \"'\";\n        }\n\n        function quote_double(str) {\n            return '\"' + str.replace(/\\x22/g, '\\\\\"') + '\"';\n        }\n\n        var quote_string = [\n            null,\n            quote_single,\n            quote_double,\n            function(str, quote) {\n                return quote == \"'\" ? quote_single(str) : quote_double(str);\n            },\n        ][options.quote_style] || function(str, quote, dq, sq) {\n            return dq > sq ? quote_single(str) : quote_double(str);\n        };\n\n        function make_string(str, quote) {\n            var dq = 0, sq = 0;\n            str = str.replace(/[\\\\\\b\\f\\n\\r\\v\\t\\x22\\x27\\u2028\\u2029\\0\\ufeff]/g, function(s, i) {\n                switch (s) {\n                  case '\"': ++dq; return '\"';\n                  case \"'\": ++sq; return \"'\";\n                  case \"\\\\\": return \"\\\\\\\\\";\n                  case \"\\n\": return \"\\\\n\";\n                  case \"\\r\": return \"\\\\r\";\n                  case \"\\t\": return \"\\\\t\";\n                  case \"\\b\": return \"\\\\b\";\n                  case \"\\f\": return \"\\\\f\";\n                  case \"\\x0B\": return options.ie ? \"\\\\x0B\" : \"\\\\v\";\n                  case \"\\u2028\": return \"\\\\u2028\";\n                  case \"\\u2029\": return \"\\\\u2029\";\n                  case \"\\ufeff\": return \"\\\\ufeff\";\n                  case \"\\0\":\n                      return /[0-9]/.test(str.charAt(i+1)) ? \"\\\\x00\" : \"\\\\0\";\n                }\n                return s;\n            });\n            return quote_string(to_utf8(str), quote, dq, sq);\n        }\n\n        /* -----[ beautification/minification ]----- */\n\n        var adjust_mappings = mappings ? function(line, col) {\n            mappings.forEach(function(mapping) {\n                mapping.line += line;\n                mapping.col += col;\n            });\n        } : noop;\n\n        var flush_mappings = mappings ? function() {\n            mappings.forEach(function(mapping) {\n                options.source_map.add(\n                    mapping.token.file,\n                    mapping.line, mapping.col,\n                    mapping.token.line, mapping.token.col,\n                    !mapping.name && mapping.token.type == \"name\" ? mapping.token.value : mapping.name\n                );\n            });\n            mappings = [];\n        } : noop;\n\n        function insert_newlines(count) {\n            stored += output.slice(0, line_end);\n            output = output.slice(line_end);\n            var new_col = output.length;\n            adjust_mappings(count, new_col - current_col);\n            current_line += count;\n            current_col = new_col;\n            while (count--) stored += \"\\n\";\n        }\n\n        var fix_line = options.max_line_len ? function(flush) {\n            if (line_fixed) {\n                if (current_col > options.max_line_len) {\n                    AST_Node.warn(\"Output exceeds {max_line_len} characters\", options);\n                }\n                return;\n            }\n            if (current_col > options.max_line_len) {\n                insert_newlines(1);\n                line_fixed = true;\n            }\n            if (line_fixed || flush) flush_mappings();\n        } : noop;\n\n        var require_semicolon = makePredicate(\"( [ + * / - , .\");\n\n        function require_space(prev, ch, str) {\n            return is_identifier_char(prev) && (is_identifier_char(ch) || ch == \"\\\\\")\n                || (ch == \"/\" && ch == prev)\n                || ((ch == \"+\" || ch == \"-\") && ch == last)\n                || last == \"--\" && ch == \">\"\n                || last == \"!\" && str == \"--\"\n                || prev == \"/\" && (str == \"in\" || str == \"instanceof\");\n        }\n\n        var print = options.beautify\n            || options.comments\n            || options.max_line_len\n            || options.preserve_line\n            || options.shebang\n            || !options.semicolons\n            || options.source_map\n            || options.width ? function(str) {\n            var ch = str.charAt(0);\n            if (need_newline_indented && ch) {\n                need_newline_indented = false;\n                if (ch != \"\\n\") {\n                    print(\"\\n\");\n                    indent();\n                }\n            }\n            if (need_space && ch) {\n                need_space = false;\n                if (!/[\\s;})]/.test(ch)) {\n                    space();\n                }\n            }\n            var prev = last.slice(-1);\n            if (might_need_semicolon) {\n                might_need_semicolon = false;\n                if (prev == \":\" && ch == \"}\" || prev != \";\" && (!ch || \";}\".indexOf(ch) < 0)) {\n                    var need_semicolon = require_semicolon[ch];\n                    if (need_semicolon || options.semicolons) {\n                        output += \";\";\n                        current_col++;\n                        if (!line_fixed) {\n                            fix_line();\n                            if (line_fixed && !need_semicolon && output == \";\") {\n                                output = \"\";\n                                current_col = 0;\n                            }\n                        }\n                        if (line_end == output.length - 1) line_end++;\n                    } else {\n                        fix_line();\n                        output += \"\\n\";\n                        current_line++;\n                        current_col = 0;\n                        // reset the semicolon flag, since we didn't print one\n                        // now and might still have to later\n                        if (/^\\s+$/.test(str)) might_need_semicolon = true;\n                    }\n                    if (!options.beautify) might_need_space = false;\n                }\n            }\n\n            if (might_need_space) {\n                if (require_space(prev, ch, str)) {\n                    output += \" \";\n                    current_col++;\n                }\n                if (prev != \"<\" || str != \"!\") might_need_space = false;\n            }\n\n            if (mapping_token) {\n                mappings.push({\n                    token: mapping_token,\n                    name: mapping_name,\n                    line: current_line,\n                    col: current_col,\n                });\n                mapping_token = false;\n                if (line_fixed) flush_mappings();\n            }\n\n            output += str;\n            var a = str.split(/\\r?\\n/), n = a.length - 1;\n            current_line += n;\n            current_col += a[0].length;\n            if (n > 0) {\n                fix_line();\n                current_col = a[n].length;\n            }\n            last = str;\n        } : function(str) {\n            var ch = str.charAt(0);\n            var prev = last.slice(-1);\n            if (might_need_semicolon) {\n                might_need_semicolon = false;\n                if (prev == \":\" && ch == \"}\" || (!ch || \";}\".indexOf(ch) < 0) && prev != \";\") {\n                    output += \";\";\n                    might_need_space = false;\n                }\n            }\n            if (might_need_space) {\n                if (require_space(prev, ch, str)) output += \" \";\n                if (prev != \"<\" || str != \"!\") might_need_space = false;\n            }\n            output += str;\n            last = str;\n        };\n\n        var space = options.beautify ? function() {\n            print(\" \");\n        } : function() {\n            might_need_space = true;\n        };\n\n        var indent = options.beautify ? function(half) {\n            if (need_newline_indented) print(\"\\n\");\n            print(half ? current_indent.slice(0, -half_indent) : current_indent);\n        } : noop;\n\n        var with_indent = options.beautify ? function(cont) {\n            var save_indentation = current_indent;\n            current_indent += full_indent;\n            cont();\n            current_indent = save_indentation;\n        } : function(cont) { cont() };\n\n        var may_add_newline = options.max_line_len || options.preserve_line ? function() {\n            fix_line();\n            line_end = output.length;\n            line_fixed = false;\n        } : noop;\n\n        var newline = options.beautify ? function() {\n            print(\"\\n\");\n            line_end = output.length;\n        } : may_add_newline;\n\n        var semicolon = options.beautify ? function() {\n            print(\";\");\n        } : function() {\n            might_need_semicolon = true;\n        };\n\n        function force_semicolon() {\n            if (might_need_semicolon) print(\";\");\n            print(\";\");\n        }\n\n        function with_block(cont, end) {\n            print(\"{\");\n            newline();\n            with_indent(cont);\n            add_mapping(end);\n            indent();\n            print(\"}\");\n        }\n\n        function with_parens(cont) {\n            print(\"(\");\n            may_add_newline();\n            cont();\n            may_add_newline();\n            print(\")\");\n        }\n\n        function with_square(cont) {\n            print(\"[\");\n            may_add_newline();\n            cont();\n            may_add_newline();\n            print(\"]\");\n        }\n\n        function comma() {\n            may_add_newline();\n            print(\",\");\n            may_add_newline();\n            space();\n        }\n\n        function colon() {\n            print(\":\");\n            space();\n        }\n\n        var add_mapping = mappings ? function(token, name) {\n            mapping_token = token;\n            mapping_name = name;\n        } : noop;\n\n        function get() {\n            if (!line_fixed) fix_line(true);\n            return stored + output;\n        }\n\n        function has_nlb() {\n            return /(^|\\n) *$/.test(output);\n        }\n\n        function pad_comment(token, force) {\n            if (need_newline_indented) return;\n            if (token.nlb && (force || !has_nlb())) {\n                need_newline_indented = true;\n            } else if (force) {\n                need_space = true;\n            }\n        }\n\n        function print_comment(comment) {\n            var value = comment.value.replace(/[@#]__PURE__/g, \" \");\n            if (/^\\s*$/.test(value) && !/^\\s*$/.test(comment.value)) return false;\n            if (/comment[134]/.test(comment.type)) {\n                print(\"//\" + value);\n                need_newline_indented = true;\n            } else if (comment.type == \"comment2\") {\n                print(\"/*\" + value + \"*/\");\n            }\n            return true;\n        }\n\n        function should_merge_comments(node, parent) {\n            if (parent instanceof AST_Binary) return parent.left === node;\n            if (parent.TYPE == \"Call\") return parent.expression === node;\n            if (parent instanceof AST_Conditional) return parent.condition === node;\n            if (parent instanceof AST_Dot) return parent.expression === node;\n            if (parent instanceof AST_Exit) return true;\n            if (parent instanceof AST_Sequence) return parent.expressions[0] === node;\n            if (parent instanceof AST_Sub) return parent.expression === node;\n            if (parent instanceof AST_UnaryPostfix) return true;\n            if (parent instanceof AST_Yield) return true;\n        }\n\n        function prepend_comments(node) {\n            var self = this;\n            var scan;\n            if (node instanceof AST_Exit) {\n                scan = node.value;\n            } else if (node instanceof AST_Yield) {\n                scan = node.expression;\n            }\n            var comments = dump(node);\n            if (!comments) comments = [];\n\n            if (scan) {\n                var tw = new TreeWalker(function(node) {\n                    if (!should_merge_comments(node, tw.parent())) return true;\n                    var before = dump(node);\n                    if (before) comments = comments.concat(before);\n                });\n                tw.push(node);\n                scan.walk(tw);\n            }\n\n            if (current_line == 1 && current_col == 0) {\n                if (comments.length > 0 && options.shebang && comments[0].type == \"comment5\") {\n                    print(\"#!\" + comments.shift().value + \"\\n\");\n                    indent();\n                }\n                var preamble = options.preamble;\n                if (preamble) print(preamble.replace(/\\r\\n?|\\u2028|\\u2029|(^|\\S)\\s*$/g, \"$1\\n\"));\n            }\n\n            comments = comments.filter(comment_filter, node);\n            var printed = false;\n            comments.forEach(function(comment, index) {\n                pad_comment(comment, index);\n                if (print_comment(comment)) printed = true;\n            });\n            if (printed) pad_comment(node.start, true);\n\n            function dump(node) {\n                var token = node.start;\n                if (!token) {\n                    if (!scan) return;\n                    node.start = token = new AST_Token();\n                }\n                var comments = token.comments_before;\n                if (!comments) {\n                    if (!scan) return;\n                    token.comments_before = comments = [];\n                }\n                if (comments._dumped === self) return;\n                comments._dumped = self;\n                return comments;\n            }\n        }\n\n        function append_comments(node, tail) {\n            var self = this;\n            var token = node.end;\n            if (!token) return;\n            var comments = token[tail ? \"comments_before\" : \"comments_after\"];\n            if (!comments || comments._dumped === self) return;\n            if (!(node instanceof AST_Statement || all(comments, function(c) {\n                return !/comment[134]/.test(c.type);\n            }))) return;\n            comments._dumped = self;\n            comments.filter(comment_filter, node).forEach(function(comment, index) {\n                pad_comment(comment, index || !tail);\n                print_comment(comment);\n            });\n        }\n\n        return {\n            get             : get,\n            reset           : reset,\n            indent          : indent,\n            should_break    : options.beautify && options.width ? function() {\n                return current_col >= options.width;\n            } : return_false,\n            has_parens      : function() { return last.slice(-1) == \"(\" },\n            newline         : newline,\n            print           : print,\n            space           : space,\n            comma           : comma,\n            colon           : colon,\n            last            : function() { return last },\n            semicolon       : semicolon,\n            force_semicolon : force_semicolon,\n            to_utf8         : to_utf8,\n            print_name      : function(name) { print(to_utf8(name.toString(), true)) },\n            print_string    : options.inline_script ? function(str, quote) {\n                str = make_string(str, quote).replace(/<\\x2f(script)([>\\/\\t\\n\\f\\r ])/gi, \"<\\\\/$1$2\");\n                print(str.replace(/\\x3c!--/g, \"\\\\x3c!--\").replace(/--\\x3e/g, \"--\\\\x3e\"));\n            } : function(str, quote) {\n                print(make_string(str, quote));\n            },\n            with_indent     : with_indent,\n            with_block      : with_block,\n            with_parens     : with_parens,\n            with_square     : with_square,\n            add_mapping     : add_mapping,\n            option          : function(opt) { return options[opt] },\n            prepend_comments: options.comments || options.shebang ? prepend_comments : noop,\n            append_comments : options.comments ? append_comments : noop,\n            push_node       : function(node) { stack.push(node) },\n            pop_node        : options.preserve_line ? function() {\n                var node = stack.pop();\n                if (node.start && node.start.line > current_line) {\n                    insert_newlines(node.start.line - current_line);\n                }\n            } : function() {\n                stack.pop();\n            },\n            parent          : function(n) {\n                return stack[stack.length - 2 - (n || 0)];\n            },\n        };\n    }\n\n    /* -----[ code generators ]----- */\n\n    (function() {\n\n        /* -----[ utils ]----- */\n\n        function DEFPRINT(nodetype, generator) {\n            nodetype.DEFMETHOD(\"_codegen\", generator);\n        }\n\n        var use_asm = false;\n\n        AST_Node.DEFMETHOD(\"print\", function(stream, force_parens) {\n            var self = this;\n            stream.push_node(self);\n            if (force_parens || self.needs_parens(stream)) {\n                stream.with_parens(doit);\n            } else {\n                doit();\n            }\n            stream.pop_node();\n\n            function doit() {\n                stream.prepend_comments(self);\n                self.add_source_map(stream);\n                self._codegen(stream);\n                stream.append_comments(self);\n            }\n        });\n        var readonly = OutputStream({\n            inline_script: false,\n            shebang: false,\n            width: false,\n        });\n        AST_Node.DEFMETHOD(\"print_to_string\", function(options) {\n            if (options) {\n                var stream = OutputStream(options);\n                this.print(stream);\n                return stream.get();\n            }\n            this.print(readonly);\n            return readonly.reset();\n        });\n\n        /* -----[ PARENTHESES ]----- */\n\n        function PARENS(nodetype, func) {\n            nodetype.DEFMETHOD(\"needs_parens\", func);\n        }\n\n        PARENS(AST_Node, return_false);\n\n        // a function expression needs parens around it when it's provably\n        // the first token to appear in a statement.\n        function needs_parens_function(output) {\n            var p = output.parent();\n            if (!output.has_parens() && first_in_statement(output, false, true)) {\n                // export default function() {}\n                // export default (function foo() {});\n                // export default (function() {})(foo);\n                // export default (function() {})`foo`;\n                // export default (function() {}) ? foo : bar;\n                return this.name || !(p instanceof AST_ExportDefault);\n            }\n            if (output.option(\"webkit\") && p instanceof AST_PropAccess && p.expression === this) return true;\n            if (output.option(\"wrap_iife\") && p instanceof AST_Call && p.expression === this) return true;\n        }\n        PARENS(AST_AsyncFunction, needs_parens_function);\n        PARENS(AST_AsyncGeneratorFunction, needs_parens_function);\n        PARENS(AST_ClassExpression, needs_parens_function);\n        PARENS(AST_Function, needs_parens_function);\n        PARENS(AST_GeneratorFunction, needs_parens_function);\n\n        // same goes for an object literal, because otherwise it would be\n        // interpreted as a block of code.\n        function needs_parens_obj(output) {\n            return !output.has_parens() && first_in_statement(output, true);\n        }\n        PARENS(AST_Object, needs_parens_obj);\n\n        function needs_parens_unary(output) {\n            var p = output.parent();\n            // (-x) ** y\n            if (p instanceof AST_Binary) return p.operator == \"**\" && p.left === this;\n            // (await x)(y)\n            // new (await x)\n            if (p instanceof AST_Call) return p.expression === this;\n            // class extends (x++) {}\n            // class x extends (typeof y) {}\n            if (p instanceof AST_Class) return true;\n            // (x++)[y]\n            // (typeof x).y\n            // https://github.com/mishoo/UglifyJS/issues/115\n            if (p instanceof AST_PropAccess) return p.expression === this;\n            // (~x)`foo`\n            if (p instanceof AST_Template) return p.tag === this;\n        }\n        PARENS(AST_Await, needs_parens_unary);\n        PARENS(AST_Unary, needs_parens_unary);\n\n        PARENS(AST_Sequence, function(output) {\n            var p = output.parent();\n                // [ 1, (2, 3), 4 ] ---> [ 1, 3, 4 ]\n            return p instanceof AST_Array\n                // () ---> (foo, bar)\n                || is_arrow(p) && p.value === this\n                // await (foo, bar)\n                || p instanceof AST_Await\n                // 1 + (2, 3) + 4 ---> 8\n                || p instanceof AST_Binary\n                // new (foo, bar) or foo(1, (2, 3), 4)\n                || p instanceof AST_Call\n                // class extends (foo, bar) {}\n                // class foo extends (bar, baz) {}\n                || p instanceof AST_Class\n                // class { foo = (bar, baz) }\n                // class { [(foo, bar)]() {} }\n                || p instanceof AST_ClassProperty\n                // (false, true) ? (a = 10, b = 20) : (c = 30)\n                // ---> 20 (side effect, set a := 10 and b := 20)\n                || p instanceof AST_Conditional\n                // [ a = (1, 2) ] = [] ---> a == 2\n                || p instanceof AST_DefaultValue\n                // { [(1, 2)]: foo } = bar\n                // { 1: (2, foo) } = bar\n                || p instanceof AST_DestructuredKeyVal\n                // export default (foo, bar)\n                || p instanceof AST_ExportDefault\n                // for (foo of (bar, baz));\n                || p instanceof AST_ForOf\n                // { [(1, 2)]: 3 }[2] ---> 3\n                // { foo: (1, 2) }.foo ---> 2\n                || p instanceof AST_ObjectProperty\n                // (1, {foo:2}).foo or (1, {foo:2})[\"foo\"] ---> 2\n                || p instanceof AST_PropAccess && p.expression === this\n                // ...(foo, bar, baz)\n                || p instanceof AST_Spread\n                // (foo, bar)`baz`\n                || p instanceof AST_Template && p.tag === this\n                // !(foo, bar, baz)\n                || p instanceof AST_Unary\n                // var a = (1, 2), b = a + a; ---> b == 4\n                || p instanceof AST_VarDef\n                // yield (foo, bar)\n                || p instanceof AST_Yield;\n        });\n\n        PARENS(AST_Binary, function(output) {\n            var p = output.parent();\n            // await (foo && bar)\n            if (p instanceof AST_Await) return true;\n            // this deals with precedence:\n            //   3 * (2 + 1)\n            //   3 - (2 - 1)\n            //   (1 ** 2) ** 3\n            if (p instanceof AST_Binary) {\n                var po = p.operator, pp = PRECEDENCE[po];\n                var so = this.operator, sp = PRECEDENCE[so];\n                return pp > sp\n                    || po == \"??\" && (so == \"&&\" || so == \"||\")\n                    || (pp == sp && this === p[po == \"**\" ? \"left\" : \"right\"]);\n            }\n            // (foo && bar)()\n            if (p instanceof AST_Call) return p.expression === this;\n            // class extends (foo && bar) {}\n            // class foo extends (bar || null) {}\n            if (p instanceof AST_Class) return true;\n            // (foo && bar)[\"prop\"], (foo && bar).prop\n            if (p instanceof AST_PropAccess) return p.expression === this;\n            // (foo && bar)``\n            if (p instanceof AST_Template) return p.tag === this;\n            // typeof (foo && bar)\n            if (p instanceof AST_Unary) return true;\n        });\n\n        function need_chain_parens(node, parent) {\n            if (!node.terminal) return false;\n            if (!(parent instanceof AST_Call || parent instanceof AST_PropAccess)) return false;\n            return parent.expression === node;\n        }\n\n        PARENS(AST_PropAccess, function(output) {\n            var node = this;\n            var p = output.parent();\n            // i.e. new (foo().bar)\n            //\n            // if there's one call into this subtree, then we need\n            // parens around it too, otherwise the call will be\n            // interpreted as passing the arguments to the upper New\n            // expression.\n            if (p instanceof AST_New && p.expression === node && root_expr(node).TYPE == \"Call\") return true;\n            // (foo?.bar)()\n            // (foo?.bar).baz\n            // new (foo?.bar)()\n            return need_chain_parens(node, p);\n        });\n\n        PARENS(AST_Call, function(output) {\n            var node = this;\n            var p = output.parent();\n            if (p instanceof AST_New) return p.expression === node;\n            // https://bugs.webkit.org/show_bug.cgi?id=123506\n            if (output.option(\"webkit\")\n                && node.expression instanceof AST_Function\n                && p instanceof AST_PropAccess\n                && p.expression === node) {\n                var g = output.parent(1);\n                if (g instanceof AST_Assign && g.left === p) return true;\n            }\n            // (foo?.())()\n            // (foo?.()).bar\n            // new (foo?.())()\n            return need_chain_parens(node, p);\n        });\n\n        PARENS(AST_New, function(output) {\n            if (need_constructor_parens(this, output)) return false;\n            var p = output.parent();\n            // (new foo)(bar)\n            if (p instanceof AST_Call) return p.expression === this;\n            // (new Date).getTime(), (new Date)[\"getTime\"]()\n            if (p instanceof AST_PropAccess) return true;\n            // (new foo)`bar`\n            if (p instanceof AST_Template) return p.tag === this;\n        });\n\n        PARENS(AST_Number, function(output) {\n            if (!output.option(\"galio\")) return false;\n            // https://github.com/mishoo/UglifyJS/pull/1009\n            var p = output.parent();\n            return p instanceof AST_PropAccess && p.expression === this && /^0/.test(make_num(this.value));\n        });\n\n        function needs_parens_assign_cond(self, output) {\n            var p = output.parent();\n            // await (a = foo)\n            if (p instanceof AST_Await) return true;\n            // 1 + (a = 2) + 3 → 6, side effect setting a = 2\n            if (p instanceof AST_Binary) return !(p instanceof AST_Assign);\n            // (a = func)() —or— new (a = Object)()\n            if (p instanceof AST_Call) return p.expression === self;\n            // class extends (a = foo) {}\n            // class foo extends (bar ? baz : moo) {}\n            if (p instanceof AST_Class) return true;\n            // (a = foo) ? bar : baz\n            if (p instanceof AST_Conditional) return p.condition === self;\n            // (a = foo)[\"prop\"] —or— (a = foo).prop\n            if (p instanceof AST_PropAccess) return p.expression === self;\n            // (a = foo)`bar`\n            if (p instanceof AST_Template) return p.tag === self;\n            // !(a = false) → true\n            if (p instanceof AST_Unary) return true;\n        }\n        PARENS(AST_Arrow, function(output) {\n            return needs_parens_assign_cond(this, output);\n        });\n        PARENS(AST_Assign, function(output) {\n            if (needs_parens_assign_cond(this, output)) return true;\n            //  v8 parser bug   --->     workaround\n            // f([1], [a] = []) ---> f([1], ([a] = []))\n            if (output.option(\"v8\")) return this.left instanceof AST_Destructured;\n            // ({ p: a } = o);\n            if (this.left instanceof AST_DestructuredObject) return needs_parens_obj(output);\n        });\n        PARENS(AST_AsyncArrow, function(output) {\n            return needs_parens_assign_cond(this, output);\n        });\n        PARENS(AST_Conditional, function(output) {\n            return needs_parens_assign_cond(this, output)\n                // https://github.com/mishoo/UglifyJS/issues/1144\n                || output.option(\"extendscript\") && output.parent() instanceof AST_Conditional;\n        });\n        PARENS(AST_Yield, function(output) {\n            return needs_parens_assign_cond(this, output);\n        });\n\n        /* -----[ PRINTERS ]----- */\n\n        DEFPRINT(AST_Directive, function(output) {\n            var quote = this.quote;\n            var value = this.value;\n            switch (output.option(\"quote_style\")) {\n              case 0:\n              case 2:\n                if (value.indexOf('\"') == -1) quote = '\"';\n                break;\n              case 1:\n                if (value.indexOf(\"'\") == -1) quote = \"'\";\n                break;\n            }\n            output.print(quote + value + quote);\n            output.semicolon();\n        });\n        DEFPRINT(AST_Debugger, function(output) {\n            output.print(\"debugger\");\n            output.semicolon();\n        });\n\n        /* -----[ statements ]----- */\n\n        function display_body(body, is_toplevel, output, allow_directives) {\n            var last = body.length - 1;\n            var in_directive = allow_directives;\n            var was_asm = use_asm;\n            body.forEach(function(stmt, i) {\n                if (in_directive) {\n                    if (stmt instanceof AST_Directive) {\n                        if (stmt.value == \"use asm\") use_asm = true;\n                    } else if (!(stmt instanceof AST_EmptyStatement)) {\n                        if (stmt instanceof AST_SimpleStatement && stmt.body instanceof AST_String) {\n                            output.force_semicolon();\n                        }\n                        in_directive = false;\n                    }\n                }\n                if (stmt instanceof AST_EmptyStatement) return;\n                output.indent();\n                stmt.print(output);\n                if (i == last && is_toplevel) return;\n                output.newline();\n                if (is_toplevel) output.newline();\n            });\n            use_asm = was_asm;\n        }\n\n        DEFPRINT(AST_Toplevel, function(output) {\n            display_body(this.body, true, output, true);\n            output.print(\"\");\n        });\n        DEFPRINT(AST_LabeledStatement, function(output) {\n            this.label.print(output);\n            output.colon();\n            this.body.print(output);\n        });\n        DEFPRINT(AST_SimpleStatement, function(output) {\n            this.body.print(output);\n            output.semicolon();\n        });\n        function print_braced_empty(self, output) {\n            output.print(\"{\");\n            output.with_indent(function() {\n                output.append_comments(self, true);\n            });\n            output.print(\"}\");\n        }\n        function print_braced(self, output, allow_directives) {\n            if (self.body.length > 0) {\n                output.with_block(function() {\n                    display_body(self.body, false, output, allow_directives);\n                }, self.end);\n            } else print_braced_empty(self, output);\n        }\n        DEFPRINT(AST_BlockStatement, function(output) {\n            print_braced(this, output);\n        });\n        DEFPRINT(AST_EmptyStatement, function(output) {\n            output.semicolon();\n        });\n        DEFPRINT(AST_Do, function(output) {\n            var self = this;\n            output.print(\"do\");\n            make_block(self.body, output);\n            output.space();\n            output.print(\"while\");\n            output.space();\n            output.with_parens(function() {\n                self.condition.print(output);\n            });\n            output.semicolon();\n        });\n        DEFPRINT(AST_While, function(output) {\n            var self = this;\n            output.print(\"while\");\n            output.space();\n            output.with_parens(function() {\n                self.condition.print(output);\n            });\n            force_statement(self.body, output);\n        });\n        DEFPRINT(AST_For, function(output) {\n            var self = this;\n            output.print(\"for\");\n            output.space();\n            output.with_parens(function() {\n                if (self.init) {\n                    if (self.init instanceof AST_Definitions) {\n                        self.init.print(output);\n                    } else {\n                        parenthesize_for_no_in(self.init, output, true);\n                    }\n                    output.print(\";\");\n                    output.space();\n                } else {\n                    output.print(\";\");\n                }\n                if (self.condition) {\n                    self.condition.print(output);\n                    output.print(\";\");\n                    output.space();\n                } else {\n                    output.print(\";\");\n                }\n                if (self.step) {\n                    self.step.print(output);\n                }\n            });\n            force_statement(self.body, output);\n        });\n        function print_for_enum(prefix, infix) {\n            return function(output) {\n                var self = this;\n                output.print(prefix);\n                output.space();\n                output.with_parens(function() {\n                    self.init.print(output);\n                    output.space();\n                    output.print(infix);\n                    output.space();\n                    self.object.print(output);\n                });\n                force_statement(self.body, output);\n            };\n        }\n        DEFPRINT(AST_ForAwaitOf, print_for_enum(\"for await\", \"of\"));\n        DEFPRINT(AST_ForIn, print_for_enum(\"for\", \"in\"));\n        DEFPRINT(AST_ForOf, print_for_enum(\"for\", \"of\"));\n        DEFPRINT(AST_With, function(output) {\n            var self = this;\n            output.print(\"with\");\n            output.space();\n            output.with_parens(function() {\n                self.expression.print(output);\n            });\n            force_statement(self.body, output);\n        });\n        DEFPRINT(AST_ExportDeclaration, function(output) {\n            output.print(\"export\");\n            output.space();\n            this.body.print(output);\n        });\n        DEFPRINT(AST_ExportDefault, function(output) {\n            output.print(\"export\");\n            output.space();\n            output.print(\"default\");\n            output.space();\n            var body = this.body;\n            body.print(output);\n            if (body instanceof AST_ClassExpression) {\n                if (!body.name) return;\n            }\n            if (body instanceof AST_DefClass) return;\n            if (body instanceof AST_LambdaDefinition) return;\n            if (body instanceof AST_LambdaExpression) {\n                if (!body.name && !is_arrow(body)) return;\n            }\n            output.semicolon();\n        });\n        function print_alias(alias, output) {\n            var value = alias.value;\n            if (value == \"*\" || is_identifier_string(value)) {\n                output.print_name(value);\n            } else {\n                output.print_string(value, alias.quote);\n            }\n        }\n        DEFPRINT(AST_ExportForeign, function(output) {\n            var self = this;\n            output.print(\"export\");\n            output.space();\n            var len = self.keys.length;\n            if (len == 0) {\n                print_braced_empty(self, output);\n            } else if (self.keys[0].value == \"*\") {\n                print_entry(0);\n            } else output.with_block(function() {\n                output.indent();\n                print_entry(0);\n                for (var i = 1; i < len; i++) {\n                    output.print(\",\");\n                    output.newline();\n                    output.indent();\n                    print_entry(i);\n                }\n                output.newline();\n            }, self.end);\n            output.space();\n            output.print(\"from\");\n            output.space();\n            self.path.print(output);\n            output.semicolon();\n\n            function print_entry(index) {\n                var alias = self.aliases[index];\n                var key = self.keys[index];\n                print_alias(key, output);\n                if (alias.value != key.value) {\n                    output.space();\n                    output.print(\"as\");\n                    output.space();\n                    print_alias(alias, output);\n                }\n            }\n        });\n        DEFPRINT(AST_ExportReferences, function(output) {\n            var self = this;\n            output.print(\"export\");\n            output.space();\n            print_properties(self, output);\n            output.semicolon();\n        });\n        DEFPRINT(AST_Import, function(output) {\n            var self = this;\n            output.print(\"import\");\n            output.space();\n            if (self.default) self.default.print(output);\n            if (self.all) {\n                if (self.default) output.comma();\n                self.all.print(output);\n            }\n            if (self.properties) {\n                if (self.default) output.comma();\n                print_properties(self, output);\n            }\n            if (self.all || self.default || self.properties) {\n                output.space();\n                output.print(\"from\");\n                output.space();\n            }\n            self.path.print(output);\n            output.semicolon();\n        });\n\n        /* -----[ functions ]----- */\n        function print_funargs(self, output) {\n            output.with_parens(function() {\n                self.argnames.forEach(function(arg, i) {\n                    if (i) output.comma();\n                    arg.print(output);\n                });\n                if (self.rest) {\n                    if (self.argnames.length) output.comma();\n                    output.print(\"...\");\n                    self.rest.print(output);\n                }\n            });\n        }\n        function print_arrow(self, output) {\n            var argname = self.argnames.length == 1 && !self.rest && self.argnames[0];\n            if (argname instanceof AST_SymbolFunarg && argname.name != \"yield\") {\n                argname.print(output);\n            } else {\n                print_funargs(self, output);\n            }\n            output.space();\n            output.print(\"=>\");\n            output.space();\n            if (self.value) {\n                self.value.print(output);\n            } else {\n                print_braced(self, output, true);\n            }\n        }\n        DEFPRINT(AST_Arrow, function(output) {\n            print_arrow(this, output);\n        });\n        DEFPRINT(AST_AsyncArrow, function(output) {\n            output.print(\"async\");\n            output.space();\n            print_arrow(this, output);\n        });\n        function print_lambda(self, output) {\n            if (self.name) {\n                output.space();\n                self.name.print(output);\n            }\n            print_funargs(self, output);\n            output.space();\n            print_braced(self, output, true);\n        }\n        DEFPRINT(AST_Lambda, function(output) {\n            output.print(\"function\");\n            print_lambda(this, output);\n        });\n        function print_async(output) {\n            output.print(\"async\");\n            output.space();\n            output.print(\"function\");\n            print_lambda(this, output);\n        }\n        DEFPRINT(AST_AsyncDefun, print_async);\n        DEFPRINT(AST_AsyncFunction, print_async);\n        function print_async_generator(output) {\n            output.print(\"async\");\n            output.space();\n            output.print(\"function*\");\n            print_lambda(this, output);\n        }\n        DEFPRINT(AST_AsyncGeneratorDefun, print_async_generator);\n        DEFPRINT(AST_AsyncGeneratorFunction, print_async_generator);\n        function print_generator(output) {\n            output.print(\"function*\");\n            print_lambda(this, output);\n        }\n        DEFPRINT(AST_GeneratorDefun, print_generator);\n        DEFPRINT(AST_GeneratorFunction, print_generator);\n\n        /* -----[ classes ]----- */\n        DEFPRINT(AST_Class, function(output) {\n            var self = this;\n            output.print(\"class\");\n            if (self.name) {\n                output.space();\n                self.name.print(output);\n            }\n            if (self.extends) {\n                output.space();\n                output.print(\"extends\");\n                output.space();\n                self.extends.print(output);\n            }\n            output.space();\n            print_properties(self, output, true);\n        });\n        DEFPRINT(AST_ClassField, function(output) {\n            var self = this;\n            if (self.static) {\n                output.print(\"static\");\n                output.space();\n            }\n            print_property_key(self, output);\n            if (self.value) {\n                output.space();\n                output.print(\"=\");\n                output.space();\n                self.value.print(output);\n            }\n            output.semicolon();\n        });\n        DEFPRINT(AST_ClassGetter, print_accessor(\"get\"));\n        DEFPRINT(AST_ClassSetter, print_accessor(\"set\"));\n        function print_method(self, output) {\n            var fn = self.value;\n            if (is_async(fn)) {\n                output.print(\"async\");\n                output.space();\n            }\n            if (is_generator(fn)) output.print(\"*\");\n            print_property_key(self, output);\n            print_lambda(self.value, output);\n        }\n        DEFPRINT(AST_ClassMethod, function(output) {\n            var self = this;\n            if (self.static) {\n                output.print(\"static\");\n                output.space();\n            }\n            print_method(self, output);\n        });\n        DEFPRINT(AST_ClassInit, function(output) {\n            output.print(\"static\");\n            output.space();\n            print_braced(this.value, output);\n        });\n\n        /* -----[ jumps ]----- */\n        function print_jump(kind, prop) {\n            return function(output) {\n                output.print(kind);\n                var target = this[prop];\n                if (target) {\n                    output.space();\n                    target.print(output);\n                }\n                output.semicolon();\n            };\n        }\n        DEFPRINT(AST_Return, print_jump(\"return\", \"value\"));\n        DEFPRINT(AST_Throw, print_jump(\"throw\", \"value\"));\n        DEFPRINT(AST_Break, print_jump(\"break\", \"label\"));\n        DEFPRINT(AST_Continue, print_jump(\"continue\", \"label\"));\n\n        /* -----[ if ]----- */\n        function make_then(self, output) {\n            var b = self.body;\n            if (output.option(\"braces\") && !(b instanceof AST_Const || b instanceof AST_Let)\n                || output.option(\"ie\") && b instanceof AST_Do)\n                return make_block(b, output);\n            // The squeezer replaces \"block\"-s that contain only a single\n            // statement with the statement itself; technically, the AST\n            // is correct, but this can create problems when we output an\n            // IF having an ELSE clause where the THEN clause ends in an\n            // IF *without* an ELSE block (then the outer ELSE would refer\n            // to the inner IF).  This function checks for this case and\n            // adds the block braces if needed.\n            if (!b) return output.force_semicolon();\n            while (true) {\n                if (b instanceof AST_If) {\n                    if (!b.alternative) {\n                        make_block(self.body, output);\n                        return;\n                    }\n                    b = b.alternative;\n                } else if (b instanceof AST_StatementWithBody) {\n                    b = b.body;\n                } else break;\n            }\n            force_statement(self.body, output);\n        }\n        DEFPRINT(AST_If, function(output) {\n            var self = this;\n            output.print(\"if\");\n            output.space();\n            output.with_parens(function() {\n                self.condition.print(output);\n            });\n            if (self.alternative) {\n                make_then(self, output);\n                output.space();\n                output.print(\"else\");\n                if (self.alternative instanceof AST_If) {\n                    output.space();\n                    self.alternative.print(output);\n                } else {\n                    force_statement(self.alternative, output);\n                }\n            } else {\n                force_statement(self.body, output);\n            }\n        });\n\n        /* -----[ switch ]----- */\n        DEFPRINT(AST_Switch, function(output) {\n            var self = this;\n            output.print(\"switch\");\n            output.space();\n            output.with_parens(function() {\n                self.expression.print(output);\n            });\n            output.space();\n            var last = self.body.length - 1;\n            if (last < 0) print_braced_empty(self, output);\n            else output.with_block(function() {\n                self.body.forEach(function(branch, i) {\n                    output.indent(true);\n                    branch.print(output);\n                    if (i < last && branch.body.length > 0)\n                        output.newline();\n                });\n            }, self.end);\n        });\n        function print_branch_body(self, output) {\n            output.newline();\n            self.body.forEach(function(stmt) {\n                output.indent();\n                stmt.print(output);\n                output.newline();\n            });\n        }\n        DEFPRINT(AST_Default, function(output) {\n            output.print(\"default:\");\n            print_branch_body(this, output);\n        });\n        DEFPRINT(AST_Case, function(output) {\n            var self = this;\n            output.print(\"case\");\n            output.space();\n            self.expression.print(output);\n            output.print(\":\");\n            print_branch_body(self, output);\n        });\n\n        /* -----[ exceptions ]----- */\n        DEFPRINT(AST_Try, function(output) {\n            var self = this;\n            output.print(\"try\");\n            output.space();\n            print_braced(self, output);\n            if (self.bcatch) {\n                output.space();\n                self.bcatch.print(output);\n            }\n            if (self.bfinally) {\n                output.space();\n                self.bfinally.print(output);\n            }\n        });\n        DEFPRINT(AST_Catch, function(output) {\n            var self = this;\n            output.print(\"catch\");\n            if (self.argname) {\n                output.space();\n                output.with_parens(function() {\n                    self.argname.print(output);\n                });\n            }\n            output.space();\n            print_braced(self, output);\n        });\n        DEFPRINT(AST_Finally, function(output) {\n            output.print(\"finally\");\n            output.space();\n            print_braced(this, output);\n        });\n\n        function print_definitions(type) {\n            return function(output) {\n                var self = this;\n                output.print(type);\n                output.space();\n                self.definitions.forEach(function(def, i) {\n                    if (i) output.comma();\n                    def.print(output);\n                });\n                var p = output.parent();\n                if (!(p instanceof AST_IterationStatement && p.init === self)) output.semicolon();\n            };\n        }\n        DEFPRINT(AST_Const, print_definitions(\"const\"));\n        DEFPRINT(AST_Let, print_definitions(\"let\"));\n        DEFPRINT(AST_Var, print_definitions(\"var\"));\n\n        function parenthesize_for_no_in(node, output, no_in) {\n            var parens = false;\n            // need to take some precautions here:\n            //    https://github.com/mishoo/UglifyJS/issues/60\n            if (no_in) node.walk(new TreeWalker(function(node) {\n                if (parens) return true;\n                if (node instanceof AST_Binary && node.operator == \"in\") return parens = true;\n                if (node instanceof AST_Scope && !(is_arrow(node) && node.value)) return true;\n            }));\n            node.print(output, parens);\n        }\n\n        DEFPRINT(AST_VarDef, function(output) {\n            var self = this;\n            self.name.print(output);\n            if (self.value) {\n                output.space();\n                output.print(\"=\");\n                output.space();\n                var p = output.parent(1);\n                var no_in = p instanceof AST_For || p instanceof AST_ForEnumeration;\n                parenthesize_for_no_in(self.value, output, no_in);\n            }\n        });\n\n        DEFPRINT(AST_DefaultValue, function(output) {\n            var self = this;\n            self.name.print(output);\n            output.space();\n            output.print(\"=\");\n            output.space();\n            self.value.print(output);\n        });\n\n        /* -----[ other expressions ]----- */\n        function print_annotation(self, output) {\n            if (!output.option(\"annotations\")) return;\n            if (!self.pure) return;\n            var level = 0, parent = self, node;\n            do {\n                node = parent;\n                parent = output.parent(level++);\n                if (parent instanceof AST_Call && parent.expression === node) return;\n            } while (parent instanceof AST_PropAccess && parent.expression === node);\n            output.print(\"/*@__PURE__*/\");\n        }\n        function print_call_args(self, output) {\n            output.with_parens(function() {\n                self.args.forEach(function(expr, i) {\n                    if (i) output.comma();\n                    expr.print(output);\n                });\n                output.add_mapping(self.end);\n            });\n        }\n        DEFPRINT(AST_Call, function(output) {\n            var self = this;\n            print_annotation(self, output);\n            self.expression.print(output);\n            if (self.optional) output.print(\"?.\");\n            print_call_args(self, output);\n        });\n        DEFPRINT(AST_New, function(output) {\n            var self = this;\n            print_annotation(self, output);\n            output.print(\"new\");\n            output.space();\n            self.expression.print(output);\n            if (need_constructor_parens(self, output)) print_call_args(self, output);\n        });\n        DEFPRINT(AST_Sequence, function(output) {\n            this.expressions.forEach(function(node, index) {\n                if (index > 0) {\n                    output.comma();\n                    if (output.should_break()) {\n                        output.newline();\n                        output.indent();\n                    }\n                }\n                node.print(output);\n            });\n        });\n        DEFPRINT(AST_Dot, function(output) {\n            var self = this;\n            var expr = self.expression;\n            expr.print(output);\n            var prop = self.property;\n            if (output.option(\"ie\") && RESERVED_WORDS[prop] || self.quoted && output.option(\"keep_quoted_props\")) {\n                if (self.optional) output.print(\"?.\");\n                output.with_square(function() {\n                    output.add_mapping(self.end);\n                    output.print_string(prop);\n                });\n            } else {\n                if (expr instanceof AST_Number && !/[ex.)]/i.test(output.last())) output.print(\".\");\n                output.print(self.optional ? \"?.\" : \".\");\n                // the name after dot would be mapped about here.\n                output.add_mapping(self.end);\n                output.print_name(prop);\n            }\n        });\n        DEFPRINT(AST_Sub, function(output) {\n            var self = this;\n            self.expression.print(output);\n            if (self.optional) output.print(\"?.\");\n            output.with_square(function() {\n                self.property.print(output);\n            });\n        });\n        DEFPRINT(AST_Spread, function(output) {\n            output.print(\"...\");\n            this.expression.print(output);\n        });\n        DEFPRINT(AST_UnaryPrefix, function(output) {\n            var op = this.operator;\n            var exp = this.expression;\n            output.print(op);\n            if (/^[a-z]/i.test(op)\n                || (/[+-]$/.test(op)\n                    && exp instanceof AST_UnaryPrefix\n                    && /^[+-]/.test(exp.operator))) {\n                output.space();\n            }\n            exp.print(output);\n        });\n        DEFPRINT(AST_UnaryPostfix, function(output) {\n            var self = this;\n            self.expression.print(output);\n            output.add_mapping(self.end);\n            output.print(self.operator);\n        });\n        DEFPRINT(AST_Binary, function(output) {\n            var self = this;\n            self.left.print(output);\n            output.space();\n            output.print(self.operator);\n            output.space();\n            self.right.print(output);\n        });\n        DEFPRINT(AST_Conditional, function(output) {\n            var self = this;\n            self.condition.print(output);\n            output.space();\n            output.print(\"?\");\n            output.space();\n            self.consequent.print(output);\n            output.space();\n            output.colon();\n            self.alternative.print(output);\n        });\n        DEFPRINT(AST_Await, function(output) {\n            output.print(\"await\");\n            output.space();\n            this.expression.print(output);\n        });\n        DEFPRINT(AST_Yield, function(output) {\n            output.print(this.nested ? \"yield*\" : \"yield\");\n            if (this.expression) {\n                output.space();\n                this.expression.print(output);\n            }\n        });\n\n        /* -----[ literals ]----- */\n        DEFPRINT(AST_Array, function(output) {\n            var a = this.elements, len = a.length;\n            output.with_square(len > 0 ? function() {\n                output.space();\n                a.forEach(function(exp, i) {\n                    if (i) output.comma();\n                    exp.print(output);\n                    // If the final element is a hole, we need to make sure it\n                    // doesn't look like a trailing comma, by inserting an actual\n                    // trailing comma.\n                    if (i === len - 1 && exp instanceof AST_Hole)\n                      output.comma();\n                });\n                output.space();\n            } : noop);\n        });\n        DEFPRINT(AST_DestructuredArray, function(output) {\n            var a = this.elements, len = a.length, rest = this.rest;\n            output.with_square(len || rest ? function() {\n                output.space();\n                a.forEach(function(exp, i) {\n                    if (i) output.comma();\n                    exp.print(output);\n                });\n                if (rest) {\n                    if (len) output.comma();\n                    output.print(\"...\");\n                    rest.print(output);\n                } else if (a[len - 1] instanceof AST_Hole) {\n                    // If the final element is a hole, we need to make sure it\n                    // doesn't look like a trailing comma, by inserting an actual\n                    // trailing comma.\n                    output.comma();\n                }\n                output.space();\n            } : noop);\n        });\n        DEFPRINT(AST_DestructuredKeyVal, function(output) {\n            var self = this;\n            var key = print_property_key(self, output);\n            var value = self.value;\n            if (key) {\n                if (value instanceof AST_DefaultValue) {\n                    if (value.name instanceof AST_Symbol && key == get_symbol_name(value.name)) {\n                        output.space();\n                        output.print(\"=\");\n                        output.space();\n                        value.value.print(output);\n                        return;\n                    }\n                } else if (value instanceof AST_Symbol) {\n                    if (key == get_symbol_name(value)) return;\n                }\n            }\n            output.colon();\n            value.print(output);\n        });\n        DEFPRINT(AST_DestructuredObject, function(output) {\n            var self = this;\n            var props = self.properties, len = props.length, rest = self.rest;\n            if (len || rest) output.with_block(function() {\n                props.forEach(function(prop, i) {\n                    if (i) {\n                        output.print(\",\");\n                        output.newline();\n                    }\n                    output.indent();\n                    prop.print(output);\n                });\n                if (rest) {\n                    if (len) {\n                        output.print(\",\");\n                        output.newline();\n                    }\n                    output.indent();\n                    output.print(\"...\");\n                    rest.print(output);\n                }\n                output.newline();\n            }, self.end);\n            else print_braced_empty(self, output);\n        });\n        function print_properties(self, output, no_comma) {\n            var props = self.properties;\n            if (props.length > 0) output.with_block(function() {\n                props.forEach(function(prop, i) {\n                    if (i) {\n                        if (!no_comma) output.print(\",\");\n                        output.newline();\n                    }\n                    output.indent();\n                    prop.print(output);\n                });\n                output.newline();\n            }, self.end);\n            else print_braced_empty(self, output);\n        }\n        DEFPRINT(AST_Object, function(output) {\n            print_properties(this, output);\n        });\n\n        function print_property_key(self, output) {\n            var key = self.key;\n            if (key instanceof AST_Node) return output.with_square(function() {\n                key.print(output);\n            });\n            var quote = self.start && self.start.quote;\n            if (output.option(\"quote_keys\") || quote && output.option(\"keep_quoted_props\")) {\n                output.print_string(key, quote);\n            } else if (\"\" + +key == key && key >= 0) {\n                output.print(make_num(key));\n            } else if (self.private) {\n                output.print_name(key);\n            } else if (RESERVED_WORDS[key] ? !output.option(\"ie\") : is_identifier_string(key)) {\n                output.print_name(key);\n                return key;\n            } else {\n                output.print_string(key, quote);\n            }\n        }\n        DEFPRINT(AST_ObjectKeyVal, function(output) {\n            var self = this;\n            print_property_key(self, output);\n            output.colon();\n            self.value.print(output);\n        });\n        DEFPRINT(AST_ObjectMethod, function(output) {\n            print_method(this, output);\n        });\n        function print_accessor(type) {\n            return function(output) {\n                var self = this;\n                if (self.static) {\n                    output.print(\"static\");\n                    output.space();\n                }\n                output.print(type);\n                output.space();\n                print_property_key(self, output);\n                print_lambda(self.value, output);\n            };\n        }\n        DEFPRINT(AST_ObjectGetter, print_accessor(\"get\"));\n        DEFPRINT(AST_ObjectSetter, print_accessor(\"set\"));\n        function get_symbol_name(sym) {\n            var def = sym.definition();\n            return def && def.mangled_name || sym.name;\n        }\n        DEFPRINT(AST_Symbol, function(output) {\n            output.print_name(get_symbol_name(this));\n        });\n        DEFPRINT(AST_SymbolExport, function(output) {\n            var self = this;\n            var name = get_symbol_name(self);\n            output.print_name(name);\n            var alias = self.alias;\n            if (alias.value != name) {\n                output.space();\n                output.print(\"as\");\n                output.space();\n                print_alias(alias, output);\n            }\n        });\n        DEFPRINT(AST_SymbolImport, function(output) {\n            var self = this;\n            var name = get_symbol_name(self);\n            var key = self.key;\n            if (key.value && key.value != name) {\n                print_alias(key, output);\n                output.space();\n                output.print(\"as\");\n                output.space();\n            }\n            output.print_name(name);\n        });\n        DEFPRINT(AST_Hole, noop);\n        DEFPRINT(AST_Template, function(output) {\n            var self = this;\n            if (self.tag) self.tag.print(output);\n            output.print(\"`\");\n            for (var i = 0; i < self.expressions.length; i++) {\n                output.print(self.strings[i]);\n                output.print(\"${\");\n                self.expressions[i].print(output);\n                output.print(\"}\");\n            }\n            output.print(self.strings[i]);\n            output.print(\"`\");\n        });\n        DEFPRINT(AST_Constant, function(output) {\n            output.print(\"\" + this.value);\n        });\n        DEFPRINT(AST_String, function(output) {\n            output.print_string(this.value, this.quote);\n        });\n        DEFPRINT(AST_Number, function(output) {\n            var start = this.start;\n            if (use_asm && start && start.raw != null) {\n                output.print(start.raw);\n            } else {\n                output.print(make_num(this.value));\n            }\n        });\n\n        DEFPRINT(AST_RegExp, function(output) {\n            var regexp = this.value;\n            var str = regexp.toString();\n            var end = str.lastIndexOf(\"/\");\n            if (regexp.raw_source) {\n                str = \"/\" + regexp.raw_source + str.slice(end);\n            } else if (end == 1) {\n                str = \"/(?:)\" + str.slice(end);\n            } else if (str.indexOf(\"/\", 1) < end) {\n                str = \"/\" + str.slice(1, end).replace(/\\\\\\\\|[^/]?\\//g, function(match) {\n                    return match[0] == \"\\\\\" ? match : match.slice(0, -1) + \"\\\\/\";\n                }) + str.slice(end);\n            }\n            output.print(output.to_utf8(str).replace(/\\\\(?:\\0(?![0-9])|[^\\0])/g, function(match) {\n                switch (match[1]) {\n                  case \"\\n\": return \"\\\\n\";\n                  case \"\\r\": return \"\\\\r\";\n                  case \"\\t\": return \"\\t\";\n                  case \"\\b\": return \"\\b\";\n                  case \"\\f\": return \"\\f\";\n                  case \"\\0\": return \"\\0\";\n                  case \"\\x0B\": return \"\\v\";\n                  case \"\\u2028\": return \"\\\\u2028\";\n                  case \"\\u2029\": return \"\\\\u2029\";\n                  default: return match;\n                }\n            }).replace(/[\\n\\r\\u2028\\u2029]/g, function(c) {\n                switch (c) {\n                  case \"\\n\": return \"\\\\n\";\n                  case \"\\r\": return \"\\\\r\";\n                  case \"\\u2028\": return \"\\\\u2028\";\n                  case \"\\u2029\": return \"\\\\u2029\";\n                }\n            }));\n        });\n\n        function force_statement(stat, output) {\n            if (output.option(\"braces\") && !(stat instanceof AST_Const || stat instanceof AST_Let)) {\n                make_block(stat, output);\n            } else if (stat instanceof AST_EmptyStatement) {\n                output.force_semicolon();\n            } else {\n                output.space();\n                stat.print(output);\n            }\n        }\n\n        // self should be AST_New.  decide if we want to show parens or not.\n        function need_constructor_parens(self, output) {\n            // Always print parentheses with arguments\n            if (self.args.length > 0) return true;\n\n            return output.option(\"beautify\");\n        }\n\n        function best_of(a) {\n            var best = a[0], len = best.length;\n            for (var i = 1; i < a.length; ++i) {\n                if (a[i].length < len) {\n                    best = a[i];\n                    len = best.length;\n                }\n            }\n            return best;\n        }\n\n        function make_num(num) {\n            var str = num.toString(10).replace(/^0\\./, \".\").replace(\"e+\", \"e\");\n            var candidates = [ str ];\n            if (Math.floor(num) === num) {\n                if (num < 0) {\n                    candidates.push(\"-0x\" + (-num).toString(16).toLowerCase());\n                } else {\n                    candidates.push(\"0x\" + num.toString(16).toLowerCase());\n                }\n            }\n            var match, len, digits;\n            if (match = /^\\.0+/.exec(str)) {\n                len = match[0].length;\n                digits = str.slice(len);\n                candidates.push(digits + \"e-\" + (digits.length + len - 1));\n            } else if (match = /[^0]0+$/.exec(str)) {\n                len = match[0].length - 1;\n                candidates.push(str.slice(0, -len) + \"e\" + len);\n            } else if (match = /^(\\d)\\.(\\d+)e(-?\\d+)$/.exec(str)) {\n                candidates.push(match[1] + match[2] + \"e\" + (match[3] - match[2].length));\n            }\n            return best_of(candidates);\n        }\n\n        function make_block(stmt, output) {\n            output.space();\n            if (stmt instanceof AST_EmptyStatement) {\n                print_braced_empty(stmt, output);\n            } else if (stmt instanceof AST_BlockStatement) {\n                stmt.print(output);\n            } else output.with_block(function() {\n                output.indent();\n                stmt.print(output);\n                output.newline();\n            }, stmt.end);\n        }\n\n        /* -----[ source map generators ]----- */\n\n        function DEFMAP(nodetype, generator) {\n            nodetype.forEach(function(nodetype) {\n                nodetype.DEFMETHOD(\"add_source_map\", generator);\n            });\n        }\n\n        DEFMAP([\n            // We could easily add info for ALL nodes, but it seems to me that\n            // would be quite wasteful, hence this noop in the base class.\n            AST_Node,\n            // since the label symbol will mark it\n            AST_LabeledStatement,\n        ], noop);\n\n        // XXX: I'm not exactly sure if we need it for all of these nodes,\n        // or if we should add even more.\n        DEFMAP([\n            AST_Array,\n            AST_Await,\n            AST_BlockStatement,\n            AST_Catch,\n            AST_Constant,\n            AST_Debugger,\n            AST_Definitions,\n            AST_Destructured,\n            AST_Directive,\n            AST_Finally,\n            AST_Jump,\n            AST_Lambda,\n            AST_New,\n            AST_Object,\n            AST_Spread,\n            AST_StatementWithBody,\n            AST_Symbol,\n            AST_Switch,\n            AST_SwitchBranch,\n            AST_Try,\n            AST_UnaryPrefix,\n            AST_Yield,\n        ], function(output) {\n            output.add_mapping(this.start);\n        });\n\n        DEFMAP([\n            AST_ClassProperty,\n            AST_DestructuredKeyVal,\n            AST_ObjectProperty,\n        ], function(output) {\n            if (typeof this.key == \"string\") output.add_mapping(this.start, this.key);\n        });\n    })();\n\n    return {\n        OutputStream\n    }\n});"]}