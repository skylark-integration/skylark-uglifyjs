{"version":3,"sources":["minify.js"],"names":["define","m_utils","m_ast","m_parse","m_output","m_compress","m_sourcemap","m_propmangle","defaults","HOP","AST_Toplevel","AST_Node","walk","AST_Scope","parse","OutputStream","Compressor","SourceMap","mangle_properties","reserve_quoted_keys","to_ascii","to_base64","read_source_map","name","toplevel","comments","end","comments_after","i","length","comment","type","match","exec","value","warn","parse_source_map","content","JSON","ex","Error","set_shorthand","options","keys","forEach","key","init_cache","cache","props","Dictionary","fromObject","to_json","toObject","Buffer","atob","btoa","alloc","b64","toString","str","from","minify","files","annotations","undefined","compress","enclose","expression","ie","ie8","keep_fargs","keep_fnames","mangle","module","nameCache","output","rename","sourceMap","timings","v8","validate","warnings","webkit","wrap","enable_validation","quoted_props","start","Date","now","vars","eval","properties","reserved","keep_quoted","Array","isArray","filename","includeSources","names","root","url","log_function","warning","push","source_map_content","orig","Object","create","inlined_content","wrap_expression","action","option","print_to_string","slice","file","replace","validate_ast","figure_out_scope","expand_names","scope","compute_char_frequency","mangle_names","unwrap_expression","result","ast","code","source_map","setSourceContent","stream","print","get","map","total","error","disable_validation"],"mappings":"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","file":"../minify.js","sourcesContent":["define([\n    \"./utils\",\n    \"./ast\",\n    \"./parse\",\n    \"./output\",\n    \"./compress\",\n    \"./sourcemap\",\n    \"./propmangle\"\n],function(m_utils, m_ast,m_parse,m_output,m_compress,m_sourcemap,m_propmangle){\n    \"use strict\";\n\n    const {\n        defaults,\n        HOP\n    } = m_utils;\n    const  { AST_Toplevel, AST_Node, walk, AST_Scope } = m_ast;\n    const { parse } = m_parse;\n    const { OutputStream } = m_output; \n    const { Compressor } = m_compress;\n\n    const { SourceMap } = m_sourcemap;\n\n    const {\n        mangle_properties,\n        reserve_quoted_keys,\n    } = m_propmangle;\n\n    var to_ascii, to_base64;\n    if (typeof Buffer == \"undefined\") {\n        to_ascii = atob;\n        to_base64 = btoa;\n    } else if (typeof Buffer.alloc == \"undefined\") {\n        to_ascii = function(b64) {\n            return new Buffer(b64, \"base64\").toString();\n        };\n        to_base64 = function(str) {\n            return new Buffer(str).toString(\"base64\");\n        };\n    } else {\n        to_ascii = function(b64) {\n            return Buffer.from(b64, \"base64\").toString();\n        };\n        to_base64 = function(str) {\n            return Buffer.from(str).toString(\"base64\");\n        };\n    }\n\n    function read_source_map(name, toplevel) {\n        var comments = toplevel.end.comments_after;\n        for (var i = comments.length; --i >= 0;) {\n            var comment = comments[i];\n            if (comment.type != \"comment1\") break;\n            var match = /^# ([^\\s=]+)=(\\S+)\\s*$/.exec(comment.value);\n            if (!match) break;\n            if (match[1] == \"sourceMappingURL\") {\n                match = /^data:application\\/json(;.*?)?;base64,([^,]+)$/.exec(match[2]);\n                if (!match) break;\n                return to_ascii(match[2]);\n            }\n        }\n        AST_Node.warn(\"inline source map not found: {name}\", {\n            name: name,\n        });\n    }\n\n    function parse_source_map(content) {\n        try {\n            return JSON.parse(content);\n        } catch (ex) {\n            throw new Error(\"invalid input source map: \" + content);\n        }\n    }\n\n    function set_shorthand(name, options, keys) {\n        keys.forEach(function(key) {\n            if (options[key]) {\n                if (typeof options[key] != \"object\") options[key] = {};\n                if (!(name in options[key])) options[key][name] = options[name];\n            }\n        });\n    }\n\n    function init_cache(cache) {\n        if (!cache) return;\n        if (!(\"props\" in cache)) {\n            cache.props = new Dictionary();\n        } else if (!(cache.props instanceof Dictionary)) {\n            cache.props = Dictionary.fromObject(cache.props);\n        }\n    }\n\n    function to_json(cache) {\n        return {\n            props: cache.props.toObject()\n        };\n    }\n\n    function minify(files, options) {\n        try {\n            options = defaults(options, {\n                annotations: undefined,\n                compress: {},\n                enclose: false,\n                expression: false,\n                ie: false,\n                ie8: false,\n                keep_fargs: false,\n                keep_fnames: false,\n                mangle: {},\n                module: false,\n                nameCache: null,\n                output: {},\n                parse: {},\n                rename: undefined,\n                sourceMap: false,\n                timings: false,\n                toplevel: !!(options && options[\"module\"]),\n                v8: false,\n                validate: false,\n                warnings: false,\n                webkit: false,\n                wrap: false,\n            }, true);\n            if (options.validate) AST_Node.enable_validation();\n            var timings = options.timings && { start: Date.now() };\n            if (options.annotations !== undefined) set_shorthand(\"annotations\", options, [ \"compress\", \"output\" ]);\n            if (options.expression) set_shorthand(\"expression\", options, [ \"compress\", \"parse\" ]);\n            if (options.ie8) options.ie = options.ie || options.ie8;\n            if (options.ie) set_shorthand(\"ie\", options, [ \"compress\", \"mangle\", \"output\", \"rename\" ]);\n            if (options.keep_fargs) set_shorthand(\"keep_fargs\", options, [ \"compress\", \"mangle\", \"rename\" ]);\n            if (options.keep_fnames) set_shorthand(\"keep_fnames\", options, [ \"compress\", \"mangle\", \"rename\" ]);\n            if (options.module) set_shorthand(\"module\", options, [ \"compress\", \"parse\" ]);\n            if (options.toplevel) set_shorthand(\"toplevel\", options, [ \"compress\", \"mangle\", \"rename\" ]);\n            if (options.v8) set_shorthand(\"v8\", options, [ \"mangle\", \"output\", \"rename\" ]);\n            if (options.webkit) set_shorthand(\"webkit\", options, [ \"compress\", \"mangle\", \"output\", \"rename\" ]);\n            var quoted_props;\n            if (options.mangle) {\n                options.mangle = defaults(options.mangle, {\n                    cache: options.nameCache && (options.nameCache.vars || {}),\n                    eval: false,\n                    ie: false,\n                    keep_fargs: false,\n                    keep_fnames: false,\n                    properties: false,\n                    reserved: [],\n                    toplevel: false,\n                    v8: false,\n                    webkit: false,\n                }, true);\n                if (options.mangle.properties) {\n                    if (typeof options.mangle.properties != \"object\") {\n                        options.mangle.properties = {};\n                    }\n                    if (options.mangle.properties.keep_quoted) {\n                        quoted_props = options.mangle.properties.reserved;\n                        if (!Array.isArray(quoted_props)) quoted_props = [];\n                        options.mangle.properties.reserved = quoted_props;\n                    }\n                    if (options.nameCache && !(\"cache\" in options.mangle.properties)) {\n                        options.mangle.properties.cache = options.nameCache.props || {};\n                    }\n                }\n                init_cache(options.mangle.cache);\n                init_cache(options.mangle.properties.cache);\n            }\n            if (options.rename === undefined) options.rename = options.compress && options.mangle;\n            if (options.sourceMap) {\n                options.sourceMap = defaults(options.sourceMap, {\n                    content: null,\n                    filename: null,\n                    includeSources: false,\n                    names: true,\n                    root: null,\n                    url: null,\n                }, true);\n            }\n            var warnings = [];\n            if (options.warnings) AST_Node.log_function(function(warning) {\n                warnings.push(warning);\n            }, options.warnings == \"verbose\");\n            if (timings) timings.parse = Date.now();\n            var toplevel;\n            options.parse = options.parse || {};\n            if (files instanceof AST_Node) {\n                toplevel = files;\n            } else {\n                if (typeof files == \"string\") files = [ files ];\n                options.parse.toplevel = null;\n                var source_map_content = options.sourceMap && options.sourceMap.content;\n                if (typeof source_map_content == \"string\" && source_map_content != \"inline\") {\n                    source_map_content = parse_source_map(source_map_content);\n                }\n                if (source_map_content) options.sourceMap.orig = Object.create(null);\n                for (var name in files) if (HOP(files, name)) {\n                    options.parse.filename = name;\n                    options.parse.toplevel = toplevel = parse(files[name], options.parse);\n                    if (source_map_content == \"inline\") {\n                        var inlined_content = read_source_map(name, toplevel);\n                        if (inlined_content) options.sourceMap.orig[name] = parse_source_map(inlined_content);\n                    } else if (source_map_content) {\n                        options.sourceMap.orig[name] = source_map_content;\n                    }\n                }\n            }\n            if (options.parse.expression) toplevel = toplevel.wrap_expression();\n            if (quoted_props) reserve_quoted_keys(toplevel, quoted_props);\n            [ \"enclose\", \"wrap\" ].forEach(function(action) {\n                var option = options[action];\n                if (!option) return;\n                var orig = toplevel.print_to_string().slice(0, -1);\n                toplevel = toplevel[action](option);\n                files[toplevel.start.file] = toplevel.print_to_string().replace(orig, \"\");\n            });\n            if (options.validate) toplevel.validate_ast();\n            if (timings) timings.rename = Date.now();\n            if (options.rename) {\n                toplevel.figure_out_scope(options.rename);\n                toplevel.expand_names(options.rename);\n            }\n            if (timings) timings.compress = Date.now();\n            if (options.compress) {\n                toplevel = new Compressor(options.compress).compress(toplevel);\n                if (options.validate) toplevel.validate_ast();\n            }\n            if (timings) timings.scope = Date.now();\n            if (options.mangle) toplevel.figure_out_scope(options.mangle);\n            if (timings) timings.mangle = Date.now();\n            if (options.mangle) {\n                toplevel.compute_char_frequency(options.mangle);\n                toplevel.mangle_names(options.mangle);\n            }\n            if (timings) timings.properties = Date.now();\n            if (quoted_props) reserve_quoted_keys(toplevel, quoted_props);\n            if (options.mangle && options.mangle.properties) mangle_properties(toplevel, options.mangle.properties);\n            if (options.parse.expression) toplevel = toplevel.unwrap_expression();\n            if (timings) timings.output = Date.now();\n            var result = {};\n            var output = defaults(options.output, {\n                ast: false,\n                code: true,\n            });\n            if (output.ast) result.ast = toplevel;\n            if (output.code) {\n                if (options.sourceMap) {\n                    output.source_map = SourceMap(options.sourceMap);\n                    if (options.sourceMap.includeSources) {\n                        if (files instanceof AST_Toplevel) {\n                            throw new Error(\"original source content unavailable\");\n                        } else for (var name in files) if (HOP(files, name)) {\n                            output.source_map.setSourceContent(name, files[name]);\n                        }\n                    }\n                }\n                delete output.ast;\n                delete output.code;\n                var stream = OutputStream(output);\n                toplevel.print(stream);\n                result.code = stream.get();\n                if (options.sourceMap) {\n                    result.map = output.source_map.toString();\n                    var url = options.sourceMap.url;\n                    if (url) {\n                        result.code = result.code.replace(/\\n\\/\\/# sourceMappingURL=\\S+\\s*$/, \"\");\n                        if (url == \"inline\") {\n                            result.code += \"\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\" + to_base64(result.map);\n                        } else {\n                            result.code += \"\\n//# sourceMappingURL=\" + url;\n                        }\n                    }\n                }\n            }\n            if (options.nameCache && options.mangle) {\n                if (options.mangle.cache) options.nameCache.vars = to_json(options.mangle.cache);\n                if (options.mangle.properties && options.mangle.properties.cache) {\n                    options.nameCache.props = to_json(options.mangle.properties.cache);\n                }\n            }\n            if (timings) {\n                timings.end = Date.now();\n                result.timings = {\n                    parse: 1e-3 * (timings.rename - timings.parse),\n                    rename: 1e-3 * (timings.compress - timings.rename),\n                    compress: 1e-3 * (timings.scope - timings.compress),\n                    scope: 1e-3 * (timings.mangle - timings.scope),\n                    mangle: 1e-3 * (timings.properties - timings.mangle),\n                    properties: 1e-3 * (timings.output - timings.properties),\n                    output: 1e-3 * (timings.end - timings.output),\n                    total: 1e-3 * (timings.end - timings.start)\n                };\n            }\n            if (warnings.length) {\n                result.warnings = warnings;\n            }\n            return result;\n        } catch (ex) {\n            return { error: ex };\n        } finally {\n            AST_Node.log_function();\n            AST_Node.disable_validation();\n        }\n    }\n\n    return {\n        minify\n    };\n});"]}